
lab3_git.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002c74  08002c74  00012c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c98  08002c98  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c98  08002c98  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c98  08002c98  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c98  08002c98  00012c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c9c  08002c9c  00012c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002ca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000005c  08002cfc  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002cfc  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000092b2  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018c9  00000000  00000000  00029337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0002ac00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002b670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001692b  00000000  00000000  0002bff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad3d  00000000  00000000  0004291b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008264b  00000000  00000000  0004d658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cfca3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029ac  00000000  00000000  000cfcf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c5c 	.word	0x08002c5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002c5c 	.word	0x08002c5c

0800014c <isButton1Pressed>:

int KeyReg33 = NORMAL_STATE; // trang thai on dinh truoc do
int TimerForKeyPress3 = 200;

// button 1 is Pressed
int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000078 	.word	0x20000078

08000170 <isButton2Pressed>:

// button 2 is Pressed
int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	2000007c 	.word	0x2000007c

08000194 <isButton3Pressed>:

// button 3 is Pressed
int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000080 	.word	0x20000080

080001b8 <subKeyProcess1>:

// subProcess 1
void subKeyProcess1(){ // BUTTON FUNCTION => MOST IMPORTANT
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	//TODO
	button1_flag = 1;
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <subKeyProcess1+0x14>)
 80001be:	2201      	movs	r2, #1
 80001c0:	601a      	str	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000078 	.word	0x20000078

080001d0 <subKeyProcess2>:

// subProcess 1
void subKeyProcess2(){
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	//TODO
	button2_flag = 1;
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <subKeyProcess2+0x14>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	2000007c 	.word	0x2000007c

080001e8 <subKeyProcess3>:

// subProcess 1
void subKeyProcess3(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	//TODO
	button3_flag = 1;
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <subKeyProcess3+0x14>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	601a      	str	r2, [r3, #0]
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000080 	.word	0x20000080

08000200 <getKeyInput1>:


// HANDLING BUTTON 1
void getKeyInput1(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	KeyReg0 = KeyReg1;
 8000204:	4b1f      	ldr	r3, [pc, #124]	; (8000284 <getKeyInput1+0x84>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a1f      	ldr	r2, [pc, #124]	; (8000288 <getKeyInput1+0x88>)
 800020a:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 800020c:	4b1f      	ldr	r3, [pc, #124]	; (800028c <getKeyInput1+0x8c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a1c      	ldr	r2, [pc, #112]	; (8000284 <getKeyInput1+0x84>)
 8000212:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(INPUT1_GPIO_Port, INPUT1_Pin);
 8000214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000218:	481d      	ldr	r0, [pc, #116]	; (8000290 <getKeyInput1+0x90>)
 800021a:	f001 fcff 	bl	8001c1c <HAL_GPIO_ReadPin>
 800021e:	4603      	mov	r3, r0
 8000220:	461a      	mov	r2, r3
 8000222:	4b1a      	ldr	r3, [pc, #104]	; (800028c <getKeyInput1+0x8c>)
 8000224:	601a      	str	r2, [r3, #0]
	if(( KeyReg0 == KeyReg1 ) && ( KeyReg1 == KeyReg2 ) ){ // nut nhan on dinh
 8000226:	4b18      	ldr	r3, [pc, #96]	; (8000288 <getKeyInput1+0x88>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b16      	ldr	r3, [pc, #88]	; (8000284 <getKeyInput1+0x84>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	429a      	cmp	r2, r3
 8000230:	d125      	bne.n	800027e <getKeyInput1+0x7e>
 8000232:	4b14      	ldr	r3, [pc, #80]	; (8000284 <getKeyInput1+0x84>)
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	4b15      	ldr	r3, [pc, #84]	; (800028c <getKeyInput1+0x8c>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	429a      	cmp	r2, r3
 800023c:	d11f      	bne.n	800027e <getKeyInput1+0x7e>
		if(KeyReg3 != KeyReg2){ // trang thai truoc do != trang thai on dinh => Nhan tha
 800023e:	4b15      	ldr	r3, [pc, #84]	; (8000294 <getKeyInput1+0x94>)
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	4b12      	ldr	r3, [pc, #72]	; (800028c <getKeyInput1+0x8c>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	429a      	cmp	r2, r3
 8000248:	d00d      	beq.n	8000266 <getKeyInput1+0x66>
			KeyReg3 = KeyReg2;
 800024a:	4b10      	ldr	r3, [pc, #64]	; (800028c <getKeyInput1+0x8c>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a11      	ldr	r2, [pc, #68]	; (8000294 <getKeyInput1+0x94>)
 8000250:	6013      	str	r3, [r2, #0]
			if(KeyReg2 == PRESSED_STATE){ // trang thai nhan
 8000252:	4b0e      	ldr	r3, [pc, #56]	; (800028c <getKeyInput1+0x8c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d111      	bne.n	800027e <getKeyInput1+0x7e>
				//TODO
				subKeyProcess1();
 800025a:	f7ff ffad 	bl	80001b8 <subKeyProcess1>
				TimerForKeyPress = 200;
 800025e:	4b0e      	ldr	r3, [pc, #56]	; (8000298 <getKeyInput1+0x98>)
 8000260:	22c8      	movs	r2, #200	; 0xc8
 8000262:	601a      	str	r2, [r3, #0]
			}

		}
	}

}
 8000264:	e00b      	b.n	800027e <getKeyInput1+0x7e>
			TimerForKeyPress--;
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <getKeyInput1+0x98>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	3b01      	subs	r3, #1
 800026c:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <getKeyInput1+0x98>)
 800026e:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 8000270:	4b09      	ldr	r3, [pc, #36]	; (8000298 <getKeyInput1+0x98>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d102      	bne.n	800027e <getKeyInput1+0x7e>
				KeyReg3 = NORMAL_STATE;
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <getKeyInput1+0x94>)
 800027a:	2201      	movs	r2, #1
 800027c:	601a      	str	r2, [r3, #0]
}
 800027e:	bf00      	nop
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	20000004 	.word	0x20000004
 8000288:	20000000 	.word	0x20000000
 800028c:	20000008 	.word	0x20000008
 8000290:	40011000 	.word	0x40011000
 8000294:	2000000c 	.word	0x2000000c
 8000298:	20000010 	.word	0x20000010

0800029c <getKeyInput2>:



// HANDLING BUTTON 1
void getKeyInput2(){
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	KeyReg02 = KeyReg12;
 80002a0:	4b1f      	ldr	r3, [pc, #124]	; (8000320 <getKeyInput2+0x84>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a1f      	ldr	r2, [pc, #124]	; (8000324 <getKeyInput2+0x88>)
 80002a6:	6013      	str	r3, [r2, #0]
	KeyReg12 = KeyReg22;
 80002a8:	4b1f      	ldr	r3, [pc, #124]	; (8000328 <getKeyInput2+0x8c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a1c      	ldr	r2, [pc, #112]	; (8000320 <getKeyInput2+0x84>)
 80002ae:	6013      	str	r3, [r2, #0]
	KeyReg22 = HAL_GPIO_ReadPin(INPUT2_GPIO_Port, INPUT2_Pin);
 80002b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002b4:	481d      	ldr	r0, [pc, #116]	; (800032c <getKeyInput2+0x90>)
 80002b6:	f001 fcb1 	bl	8001c1c <HAL_GPIO_ReadPin>
 80002ba:	4603      	mov	r3, r0
 80002bc:	461a      	mov	r2, r3
 80002be:	4b1a      	ldr	r3, [pc, #104]	; (8000328 <getKeyInput2+0x8c>)
 80002c0:	601a      	str	r2, [r3, #0]
	if(( KeyReg02 == KeyReg12 ) && ( KeyReg12 == KeyReg22 ) ){ // nut nhan on dinh
 80002c2:	4b18      	ldr	r3, [pc, #96]	; (8000324 <getKeyInput2+0x88>)
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	4b16      	ldr	r3, [pc, #88]	; (8000320 <getKeyInput2+0x84>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	429a      	cmp	r2, r3
 80002cc:	d125      	bne.n	800031a <getKeyInput2+0x7e>
 80002ce:	4b14      	ldr	r3, [pc, #80]	; (8000320 <getKeyInput2+0x84>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	4b15      	ldr	r3, [pc, #84]	; (8000328 <getKeyInput2+0x8c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d11f      	bne.n	800031a <getKeyInput2+0x7e>
		if(KeyReg32 != KeyReg22){ // trang thai truoc do != trang thai on dinh => Nhan tha
 80002da:	4b15      	ldr	r3, [pc, #84]	; (8000330 <getKeyInput2+0x94>)
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	4b12      	ldr	r3, [pc, #72]	; (8000328 <getKeyInput2+0x8c>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d00d      	beq.n	8000302 <getKeyInput2+0x66>
			KeyReg32 = KeyReg22;
 80002e6:	4b10      	ldr	r3, [pc, #64]	; (8000328 <getKeyInput2+0x8c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a11      	ldr	r2, [pc, #68]	; (8000330 <getKeyInput2+0x94>)
 80002ec:	6013      	str	r3, [r2, #0]
			if(KeyReg22 == PRESSED_STATE){ // trang thai nhan
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <getKeyInput2+0x8c>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d111      	bne.n	800031a <getKeyInput2+0x7e>
				//TODO
				subKeyProcess2();
 80002f6:	f7ff ff6b 	bl	80001d0 <subKeyProcess2>
				TimerForKeyPress2 = 200;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <getKeyInput2+0x98>)
 80002fc:	22c8      	movs	r2, #200	; 0xc8
 80002fe:	601a      	str	r2, [r3, #0]
			}

		}
	}

}
 8000300:	e00b      	b.n	800031a <getKeyInput2+0x7e>
			TimerForKeyPress2--;
 8000302:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <getKeyInput2+0x98>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	3b01      	subs	r3, #1
 8000308:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <getKeyInput2+0x98>)
 800030a:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress2 == 0){
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <getKeyInput2+0x98>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d102      	bne.n	800031a <getKeyInput2+0x7e>
				KeyReg32 = NORMAL_STATE;
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <getKeyInput2+0x94>)
 8000316:	2201      	movs	r2, #1
 8000318:	601a      	str	r2, [r3, #0]
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000018 	.word	0x20000018
 8000324:	20000014 	.word	0x20000014
 8000328:	2000001c 	.word	0x2000001c
 800032c:	40011000 	.word	0x40011000
 8000330:	20000020 	.word	0x20000020
 8000334:	20000024 	.word	0x20000024

08000338 <getKeyInput3>:



// HANDLING BUTTON 1
void getKeyInput3(){
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	KeyReg03 = KeyReg13;
 800033c:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <getKeyInput3+0x84>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a1f      	ldr	r2, [pc, #124]	; (80003c0 <getKeyInput3+0x88>)
 8000342:	6013      	str	r3, [r2, #0]
	KeyReg13 = KeyReg23;
 8000344:	4b1f      	ldr	r3, [pc, #124]	; (80003c4 <getKeyInput3+0x8c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a1c      	ldr	r2, [pc, #112]	; (80003bc <getKeyInput3+0x84>)
 800034a:	6013      	str	r3, [r2, #0]
	KeyReg23 = HAL_GPIO_ReadPin(INPUT3_GPIO_Port, INPUT3_Pin);
 800034c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000350:	481d      	ldr	r0, [pc, #116]	; (80003c8 <getKeyInput3+0x90>)
 8000352:	f001 fc63 	bl	8001c1c <HAL_GPIO_ReadPin>
 8000356:	4603      	mov	r3, r0
 8000358:	461a      	mov	r2, r3
 800035a:	4b1a      	ldr	r3, [pc, #104]	; (80003c4 <getKeyInput3+0x8c>)
 800035c:	601a      	str	r2, [r3, #0]
	if(( KeyReg03 == KeyReg13 ) && ( KeyReg13 == KeyReg23 ) ){ // nut nhan on dinh
 800035e:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <getKeyInput3+0x88>)
 8000360:	681a      	ldr	r2, [r3, #0]
 8000362:	4b16      	ldr	r3, [pc, #88]	; (80003bc <getKeyInput3+0x84>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	429a      	cmp	r2, r3
 8000368:	d125      	bne.n	80003b6 <getKeyInput3+0x7e>
 800036a:	4b14      	ldr	r3, [pc, #80]	; (80003bc <getKeyInput3+0x84>)
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <getKeyInput3+0x8c>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	429a      	cmp	r2, r3
 8000374:	d11f      	bne.n	80003b6 <getKeyInput3+0x7e>
		if(KeyReg33 != KeyReg23){ // trang thai truoc do != trang thai on dinh => Nhan tha
 8000376:	4b15      	ldr	r3, [pc, #84]	; (80003cc <getKeyInput3+0x94>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <getKeyInput3+0x8c>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	429a      	cmp	r2, r3
 8000380:	d00d      	beq.n	800039e <getKeyInput3+0x66>
			KeyReg33 = KeyReg23;
 8000382:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <getKeyInput3+0x8c>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a11      	ldr	r2, [pc, #68]	; (80003cc <getKeyInput3+0x94>)
 8000388:	6013      	str	r3, [r2, #0]
			if(KeyReg23 == PRESSED_STATE){ // trang thai nhan
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <getKeyInput3+0x8c>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d111      	bne.n	80003b6 <getKeyInput3+0x7e>
				//TODO
				subKeyProcess3();
 8000392:	f7ff ff29 	bl	80001e8 <subKeyProcess3>
				TimerForKeyPress3 = 200;
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <getKeyInput3+0x98>)
 8000398:	22c8      	movs	r2, #200	; 0xc8
 800039a:	601a      	str	r2, [r3, #0]
			}

		}
	}

}
 800039c:	e00b      	b.n	80003b6 <getKeyInput3+0x7e>
			TimerForKeyPress3--;
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <getKeyInput3+0x98>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	3b01      	subs	r3, #1
 80003a4:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <getKeyInput3+0x98>)
 80003a6:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress3 == 0){
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <getKeyInput3+0x98>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d102      	bne.n	80003b6 <getKeyInput3+0x7e>
				KeyReg33 = NORMAL_STATE;
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <getKeyInput3+0x94>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	601a      	str	r2, [r3, #0]
}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	2000002c 	.word	0x2000002c
 80003c0:	20000028 	.word	0x20000028
 80003c4:	20000030 	.word	0x20000030
 80003c8:	40011000 	.word	0x40011000
 80003cc:	20000034 	.word	0x20000034
 80003d0:	20000038 	.word	0x20000038

080003d4 <fsm_automatic_run_normally_1>:
 */

#include "fsm_automatic.h"


void fsm_automatic_run_normally_1(){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0

	switch(status1){
 80003d8:	4b55      	ldr	r3, [pc, #340]	; (8000530 <fsm_automatic_run_normally_1+0x15c>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	3b01      	subs	r3, #1
 80003de:	2b03      	cmp	r3, #3
 80003e0:	f200 809f 	bhi.w	8000522 <fsm_automatic_run_normally_1+0x14e>
 80003e4:	a201      	add	r2, pc, #4	; (adr r2, 80003ec <fsm_automatic_run_normally_1+0x18>)
 80003e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ea:	bf00      	nop
 80003ec:	080003fd 	.word	0x080003fd
 80003f0:	08000441 	.word	0x08000441
 80003f4:	0800048d 	.word	0x0800048d
 80003f8:	080004d9 	.word	0x080004d9
		case INIT:
			// TODO
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2102      	movs	r1, #2
 8000400:	484c      	ldr	r0, [pc, #304]	; (8000534 <fsm_automatic_run_normally_1+0x160>)
 8000402:	f001 fc22 	bl	8001c4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2108      	movs	r1, #8
 800040a:	484a      	ldr	r0, [pc, #296]	; (8000534 <fsm_automatic_run_normally_1+0x160>)
 800040c:	f001 fc1d 	bl	8001c4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2104      	movs	r1, #4
 8000414:	4847      	ldr	r0, [pc, #284]	; (8000534 <fsm_automatic_run_normally_1+0x160>)
 8000416:	f001 fc18 	bl	8001c4a <HAL_GPIO_WritePin>
			status1 = AUTO_RED;
 800041a:	4b45      	ldr	r3, [pc, #276]	; (8000530 <fsm_automatic_run_normally_1+0x15c>)
 800041c:	2202      	movs	r2, #2
 800041e:	601a      	str	r2, [r3, #0]
			led_time_1 = red_time/100;
 8000420:	4b45      	ldr	r3, [pc, #276]	; (8000538 <fsm_automatic_run_normally_1+0x164>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a45      	ldr	r2, [pc, #276]	; (800053c <fsm_automatic_run_normally_1+0x168>)
 8000426:	fb82 1203 	smull	r1, r2, r2, r3
 800042a:	1152      	asrs	r2, r2, #5
 800042c:	17db      	asrs	r3, r3, #31
 800042e:	1ad3      	subs	r3, r2, r3
 8000430:	4a43      	ldr	r2, [pc, #268]	; (8000540 <fsm_automatic_run_normally_1+0x16c>)
 8000432:	6013      	str	r3, [r2, #0]
			setTimer1(red_time);
 8000434:	4b40      	ldr	r3, [pc, #256]	; (8000538 <fsm_automatic_run_normally_1+0x164>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4618      	mov	r0, r3
 800043a:	f000 ff51 	bl	80012e0 <setTimer1>

			break;
 800043e:	e075      	b.n	800052c <fsm_automatic_run_normally_1+0x158>
		case AUTO_RED:
			// TODO
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000440:	2201      	movs	r2, #1
 8000442:	2102      	movs	r1, #2
 8000444:	483b      	ldr	r0, [pc, #236]	; (8000534 <fsm_automatic_run_normally_1+0x160>)
 8000446:	f001 fc00 	bl	8001c4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800044a:	2200      	movs	r2, #0
 800044c:	2108      	movs	r1, #8
 800044e:	4839      	ldr	r0, [pc, #228]	; (8000534 <fsm_automatic_run_normally_1+0x160>)
 8000450:	f001 fbfb 	bl	8001c4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	2104      	movs	r1, #4
 8000458:	4836      	ldr	r0, [pc, #216]	; (8000534 <fsm_automatic_run_normally_1+0x160>)
 800045a:	f001 fbf6 	bl	8001c4a <HAL_GPIO_WritePin>

			if(timer1_flag ==1){ // for LED_RED
 800045e:	4b39      	ldr	r3, [pc, #228]	; (8000544 <fsm_automatic_run_normally_1+0x170>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	2b01      	cmp	r3, #1
 8000464:	d15f      	bne.n	8000526 <fsm_automatic_run_normally_1+0x152>
				led_time_1 = green_time/100;
 8000466:	4b38      	ldr	r3, [pc, #224]	; (8000548 <fsm_automatic_run_normally_1+0x174>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a34      	ldr	r2, [pc, #208]	; (800053c <fsm_automatic_run_normally_1+0x168>)
 800046c:	fb82 1203 	smull	r1, r2, r2, r3
 8000470:	1152      	asrs	r2, r2, #5
 8000472:	17db      	asrs	r3, r3, #31
 8000474:	1ad3      	subs	r3, r2, r3
 8000476:	4a32      	ldr	r2, [pc, #200]	; (8000540 <fsm_automatic_run_normally_1+0x16c>)
 8000478:	6013      	str	r3, [r2, #0]

				status1 = AUTO_GREEN;
 800047a:	4b2d      	ldr	r3, [pc, #180]	; (8000530 <fsm_automatic_run_normally_1+0x15c>)
 800047c:	2203      	movs	r2, #3
 800047e:	601a      	str	r2, [r3, #0]
				setTimer1(green_time);
 8000480:	4b31      	ldr	r3, [pc, #196]	; (8000548 <fsm_automatic_run_normally_1+0x174>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4618      	mov	r0, r3
 8000486:	f000 ff2b 	bl	80012e0 <setTimer1>
			}
			break;
 800048a:	e04c      	b.n	8000526 <fsm_automatic_run_normally_1+0x152>
		case AUTO_GREEN:
			// TODO
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	2102      	movs	r1, #2
 8000490:	4828      	ldr	r0, [pc, #160]	; (8000534 <fsm_automatic_run_normally_1+0x160>)
 8000492:	f001 fbda 	bl	8001c4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000496:	2201      	movs	r2, #1
 8000498:	2108      	movs	r1, #8
 800049a:	4826      	ldr	r0, [pc, #152]	; (8000534 <fsm_automatic_run_normally_1+0x160>)
 800049c:	f001 fbd5 	bl	8001c4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2104      	movs	r1, #4
 80004a4:	4823      	ldr	r0, [pc, #140]	; (8000534 <fsm_automatic_run_normally_1+0x160>)
 80004a6:	f001 fbd0 	bl	8001c4a <HAL_GPIO_WritePin>

			if(timer1_flag ==1){ // for LED_RED
 80004aa:	4b26      	ldr	r3, [pc, #152]	; (8000544 <fsm_automatic_run_normally_1+0x170>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d13b      	bne.n	800052a <fsm_automatic_run_normally_1+0x156>
				led_time_1 = yellow_time/100;
 80004b2:	4b26      	ldr	r3, [pc, #152]	; (800054c <fsm_automatic_run_normally_1+0x178>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a21      	ldr	r2, [pc, #132]	; (800053c <fsm_automatic_run_normally_1+0x168>)
 80004b8:	fb82 1203 	smull	r1, r2, r2, r3
 80004bc:	1152      	asrs	r2, r2, #5
 80004be:	17db      	asrs	r3, r3, #31
 80004c0:	1ad3      	subs	r3, r2, r3
 80004c2:	4a1f      	ldr	r2, [pc, #124]	; (8000540 <fsm_automatic_run_normally_1+0x16c>)
 80004c4:	6013      	str	r3, [r2, #0]
				status1 = AUTO_YELLOW;
 80004c6:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <fsm_automatic_run_normally_1+0x15c>)
 80004c8:	2204      	movs	r2, #4
 80004ca:	601a      	str	r2, [r3, #0]
				setTimer1(yellow_time);
 80004cc:	4b1f      	ldr	r3, [pc, #124]	; (800054c <fsm_automatic_run_normally_1+0x178>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4618      	mov	r0, r3
 80004d2:	f000 ff05 	bl	80012e0 <setTimer1>
			}
			break;
 80004d6:	e028      	b.n	800052a <fsm_automatic_run_normally_1+0x156>
		case AUTO_YELLOW:
			// TODO
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	2102      	movs	r1, #2
 80004dc:	4815      	ldr	r0, [pc, #84]	; (8000534 <fsm_automatic_run_normally_1+0x160>)
 80004de:	f001 fbb4 	bl	8001c4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2108      	movs	r1, #8
 80004e6:	4813      	ldr	r0, [pc, #76]	; (8000534 <fsm_automatic_run_normally_1+0x160>)
 80004e8:	f001 fbaf 	bl	8001c4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	2104      	movs	r1, #4
 80004f0:	4810      	ldr	r0, [pc, #64]	; (8000534 <fsm_automatic_run_normally_1+0x160>)
 80004f2:	f001 fbaa 	bl	8001c4a <HAL_GPIO_WritePin>

			if(timer1_flag ==1){ // for LED_RED
 80004f6:	4b13      	ldr	r3, [pc, #76]	; (8000544 <fsm_automatic_run_normally_1+0x170>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d111      	bne.n	8000522 <fsm_automatic_run_normally_1+0x14e>
				led_time_1 = red_time/100;
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <fsm_automatic_run_normally_1+0x164>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a0e      	ldr	r2, [pc, #56]	; (800053c <fsm_automatic_run_normally_1+0x168>)
 8000504:	fb82 1203 	smull	r1, r2, r2, r3
 8000508:	1152      	asrs	r2, r2, #5
 800050a:	17db      	asrs	r3, r3, #31
 800050c:	1ad3      	subs	r3, r2, r3
 800050e:	4a0c      	ldr	r2, [pc, #48]	; (8000540 <fsm_automatic_run_normally_1+0x16c>)
 8000510:	6013      	str	r3, [r2, #0]
				status1 = AUTO_RED;
 8000512:	4b07      	ldr	r3, [pc, #28]	; (8000530 <fsm_automatic_run_normally_1+0x15c>)
 8000514:	2202      	movs	r2, #2
 8000516:	601a      	str	r2, [r3, #0]
				setTimer1(red_time);
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <fsm_automatic_run_normally_1+0x164>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4618      	mov	r0, r3
 800051e:	f000 fedf 	bl	80012e0 <setTimer1>
			}
		default:
			break;
 8000522:	bf00      	nop
 8000524:	e002      	b.n	800052c <fsm_automatic_run_normally_1+0x158>
			break;
 8000526:	bf00      	nop
 8000528:	e000      	b.n	800052c <fsm_automatic_run_normally_1+0x158>
			break;
 800052a:	bf00      	nop
	}
}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}
 8000530:	2000003c 	.word	0x2000003c
 8000534:	40010800 	.word	0x40010800
 8000538:	20000044 	.word	0x20000044
 800053c:	51eb851f 	.word	0x51eb851f
 8000540:	200000b4 	.word	0x200000b4
 8000544:	20000088 	.word	0x20000088
 8000548:	20000048 	.word	0x20000048
 800054c:	2000004c 	.word	0x2000004c

08000550 <fsm_automatic_run_normally_2>:



void fsm_automatic_run_normally_2(){
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	switch(status2){
 8000554:	4b57      	ldr	r3, [pc, #348]	; (80006b4 <fsm_automatic_run_normally_2+0x164>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	3b02      	subs	r3, #2
 800055a:	2b03      	cmp	r3, #3
 800055c:	f200 80a0 	bhi.w	80006a0 <fsm_automatic_run_normally_2+0x150>
 8000560:	a201      	add	r2, pc, #4	; (adr r2, 8000568 <fsm_automatic_run_normally_2+0x18>)
 8000562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000566:	bf00      	nop
 8000568:	080005bd 	.word	0x080005bd
 800056c:	08000609 	.word	0x08000609
 8000570:	08000655 	.word	0x08000655
 8000574:	08000579 	.word	0x08000579
		case SECOND_INIT:
			// TODO
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2102      	movs	r1, #2
 800057c:	484e      	ldr	r0, [pc, #312]	; (80006b8 <fsm_automatic_run_normally_2+0x168>)
 800057e:	f001 fb64 	bl	8001c4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000582:	2201      	movs	r2, #1
 8000584:	2108      	movs	r1, #8
 8000586:	484c      	ldr	r0, [pc, #304]	; (80006b8 <fsm_automatic_run_normally_2+0x168>)
 8000588:	f001 fb5f 	bl	8001c4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	2104      	movs	r1, #4
 8000590:	4849      	ldr	r0, [pc, #292]	; (80006b8 <fsm_automatic_run_normally_2+0x168>)
 8000592:	f001 fb5a 	bl	8001c4a <HAL_GPIO_WritePin>
			status2 = AUTO_GREEN;
 8000596:	4b47      	ldr	r3, [pc, #284]	; (80006b4 <fsm_automatic_run_normally_2+0x164>)
 8000598:	2203      	movs	r2, #3
 800059a:	601a      	str	r2, [r3, #0]
			led_time_2 = green_time/100;
 800059c:	4b47      	ldr	r3, [pc, #284]	; (80006bc <fsm_automatic_run_normally_2+0x16c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a47      	ldr	r2, [pc, #284]	; (80006c0 <fsm_automatic_run_normally_2+0x170>)
 80005a2:	fb82 1203 	smull	r1, r2, r2, r3
 80005a6:	1152      	asrs	r2, r2, #5
 80005a8:	17db      	asrs	r3, r3, #31
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	4a45      	ldr	r2, [pc, #276]	; (80006c4 <fsm_automatic_run_normally_2+0x174>)
 80005ae:	6013      	str	r3, [r2, #0]
			setTimer2(green_time);
 80005b0:	4b42      	ldr	r3, [pc, #264]	; (80006bc <fsm_automatic_run_normally_2+0x16c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 fec1 	bl	800133c <setTimer2>

			break;
 80005ba:	e078      	b.n	80006ae <fsm_automatic_run_normally_2+0x15e>
		case AUTO_RED:
			// TODO
			HAL_GPIO_WritePin(LED_RED_SECOND_GPIO_Port, LED_RED_SECOND_Pin, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2110      	movs	r1, #16
 80005c0:	483d      	ldr	r0, [pc, #244]	; (80006b8 <fsm_automatic_run_normally_2+0x168>)
 80005c2:	f001 fb42 	bl	8001c4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_SECOND_GPIO_Port, LED_GREEN_SECOND_Pin, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2140      	movs	r1, #64	; 0x40
 80005ca:	483b      	ldr	r0, [pc, #236]	; (80006b8 <fsm_automatic_run_normally_2+0x168>)
 80005cc:	f001 fb3d 	bl	8001c4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_SECOND_GPIO_Port, LED_YELLOW_SECOND_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2120      	movs	r1, #32
 80005d4:	4838      	ldr	r0, [pc, #224]	; (80006b8 <fsm_automatic_run_normally_2+0x168>)
 80005d6:	f001 fb38 	bl	8001c4a <HAL_GPIO_WritePin>

			if(timer2_flag ==1){ // for LED_RED
 80005da:	4b3b      	ldr	r3, [pc, #236]	; (80006c8 <fsm_automatic_run_normally_2+0x178>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d160      	bne.n	80006a4 <fsm_automatic_run_normally_2+0x154>
				led_time_2 = green_time/100;
 80005e2:	4b36      	ldr	r3, [pc, #216]	; (80006bc <fsm_automatic_run_normally_2+0x16c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a36      	ldr	r2, [pc, #216]	; (80006c0 <fsm_automatic_run_normally_2+0x170>)
 80005e8:	fb82 1203 	smull	r1, r2, r2, r3
 80005ec:	1152      	asrs	r2, r2, #5
 80005ee:	17db      	asrs	r3, r3, #31
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	4a34      	ldr	r2, [pc, #208]	; (80006c4 <fsm_automatic_run_normally_2+0x174>)
 80005f4:	6013      	str	r3, [r2, #0]
				status2 = AUTO_GREEN;
 80005f6:	4b2f      	ldr	r3, [pc, #188]	; (80006b4 <fsm_automatic_run_normally_2+0x164>)
 80005f8:	2203      	movs	r2, #3
 80005fa:	601a      	str	r2, [r3, #0]
				setTimer2(green_time);
 80005fc:	4b2f      	ldr	r3, [pc, #188]	; (80006bc <fsm_automatic_run_normally_2+0x16c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fe9b 	bl	800133c <setTimer2>
			}
			break;
 8000606:	e04d      	b.n	80006a4 <fsm_automatic_run_normally_2+0x154>
		case AUTO_GREEN:
			// TODO
			HAL_GPIO_WritePin(LED_RED_SECOND_GPIO_Port, LED_RED_SECOND_Pin, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2110      	movs	r1, #16
 800060c:	482a      	ldr	r0, [pc, #168]	; (80006b8 <fsm_automatic_run_normally_2+0x168>)
 800060e:	f001 fb1c 	bl	8001c4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_SECOND_GPIO_Port, LED_GREEN_SECOND_Pin, GPIO_PIN_SET);
 8000612:	2201      	movs	r2, #1
 8000614:	2140      	movs	r1, #64	; 0x40
 8000616:	4828      	ldr	r0, [pc, #160]	; (80006b8 <fsm_automatic_run_normally_2+0x168>)
 8000618:	f001 fb17 	bl	8001c4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_SECOND_GPIO_Port, LED_YELLOW_SECOND_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2120      	movs	r1, #32
 8000620:	4825      	ldr	r0, [pc, #148]	; (80006b8 <fsm_automatic_run_normally_2+0x168>)
 8000622:	f001 fb12 	bl	8001c4a <HAL_GPIO_WritePin>

			if(timer2_flag ==1){ // for LED_RED
 8000626:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <fsm_automatic_run_normally_2+0x178>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d13c      	bne.n	80006a8 <fsm_automatic_run_normally_2+0x158>
				led_time_2 = yellow_time/100;
 800062e:	4b27      	ldr	r3, [pc, #156]	; (80006cc <fsm_automatic_run_normally_2+0x17c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a23      	ldr	r2, [pc, #140]	; (80006c0 <fsm_automatic_run_normally_2+0x170>)
 8000634:	fb82 1203 	smull	r1, r2, r2, r3
 8000638:	1152      	asrs	r2, r2, #5
 800063a:	17db      	asrs	r3, r3, #31
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	4a21      	ldr	r2, [pc, #132]	; (80006c4 <fsm_automatic_run_normally_2+0x174>)
 8000640:	6013      	str	r3, [r2, #0]
				status2 = AUTO_YELLOW;
 8000642:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <fsm_automatic_run_normally_2+0x164>)
 8000644:	2204      	movs	r2, #4
 8000646:	601a      	str	r2, [r3, #0]
				setTimer2(yellow_time);
 8000648:	4b20      	ldr	r3, [pc, #128]	; (80006cc <fsm_automatic_run_normally_2+0x17c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fe75 	bl	800133c <setTimer2>
			}
			break;
 8000652:	e029      	b.n	80006a8 <fsm_automatic_run_normally_2+0x158>
		case AUTO_YELLOW:
			// TODO
			HAL_GPIO_WritePin(LED_RED_SECOND_GPIO_Port, LED_RED_SECOND_Pin, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	2110      	movs	r1, #16
 8000658:	4817      	ldr	r0, [pc, #92]	; (80006b8 <fsm_automatic_run_normally_2+0x168>)
 800065a:	f001 faf6 	bl	8001c4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_SECOND_GPIO_Port, LED_GREEN_SECOND_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2140      	movs	r1, #64	; 0x40
 8000662:	4815      	ldr	r0, [pc, #84]	; (80006b8 <fsm_automatic_run_normally_2+0x168>)
 8000664:	f001 faf1 	bl	8001c4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_SECOND_GPIO_Port, LED_YELLOW_SECOND_Pin, GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	2120      	movs	r1, #32
 800066c:	4812      	ldr	r0, [pc, #72]	; (80006b8 <fsm_automatic_run_normally_2+0x168>)
 800066e:	f001 faec 	bl	8001c4a <HAL_GPIO_WritePin>

			if(timer2_flag ==1){ // for LED_RED
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <fsm_automatic_run_normally_2+0x178>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d118      	bne.n	80006ac <fsm_automatic_run_normally_2+0x15c>
				led_time_2 = red_time/100;
 800067a:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <fsm_automatic_run_normally_2+0x180>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a10      	ldr	r2, [pc, #64]	; (80006c0 <fsm_automatic_run_normally_2+0x170>)
 8000680:	fb82 1203 	smull	r1, r2, r2, r3
 8000684:	1152      	asrs	r2, r2, #5
 8000686:	17db      	asrs	r3, r3, #31
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <fsm_automatic_run_normally_2+0x174>)
 800068c:	6013      	str	r3, [r2, #0]
				status2 = AUTO_RED;
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <fsm_automatic_run_normally_2+0x164>)
 8000690:	2202      	movs	r2, #2
 8000692:	601a      	str	r2, [r3, #0]
				setTimer2(red_time);
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <fsm_automatic_run_normally_2+0x180>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fe4f 	bl	800133c <setTimer2>
			}
			break;
 800069e:	e005      	b.n	80006ac <fsm_automatic_run_normally_2+0x15c>
		default:
			break;
 80006a0:	bf00      	nop
 80006a2:	e004      	b.n	80006ae <fsm_automatic_run_normally_2+0x15e>
			break;
 80006a4:	bf00      	nop
 80006a6:	e002      	b.n	80006ae <fsm_automatic_run_normally_2+0x15e>
			break;
 80006a8:	bf00      	nop
 80006aa:	e000      	b.n	80006ae <fsm_automatic_run_normally_2+0x15e>
			break;
 80006ac:	bf00      	nop
	}
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000040 	.word	0x20000040
 80006b8:	40010800 	.word	0x40010800
 80006bc:	20000048 	.word	0x20000048
 80006c0:	51eb851f 	.word	0x51eb851f
 80006c4:	200000b8 	.word	0x200000b8
 80006c8:	20000090 	.word	0x20000090
 80006cc:	2000004c 	.word	0x2000004c
 80006d0:	20000044 	.word	0x20000044

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08c      	sub	sp, #48	; 0x30
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006da:	f000 ffb5 	bl	8001648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006de:	f000 fce5 	bl	80010ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e2:	f000 fd6b 	bl	80011bc <MX_GPIO_Init>
  MX_TIM2_Init();
 80006e6:	f000 fd1d 	bl	8001124 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80006ea:	487b      	ldr	r0, [pc, #492]	; (80008d8 <main+0x204>)
 80006ec:	f001 fef2 	bl	80024d4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  setTimer1(100);

  int mode = 1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  int red_increase = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
  int green_increase = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]
  int yellow_increase = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]

  int increase_time = 100;
 8000700:	2364      	movs	r3, #100	; 0x64
 8000702:	613b      	str	r3, [r7, #16]
  int increase_time_in_led = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	62bb      	str	r3, [r7, #40]	; 0x28
  int default_red = 500;
 8000708:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800070c:	60fb      	str	r3, [r7, #12]
  int default_yellow = 200;
 800070e:	23c8      	movs	r3, #200	; 0xc8
 8000710:	60bb      	str	r3, [r7, #8]
  int default_green = 300;
 8000712:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000716:	607b      	str	r3, [r7, #4]
  int limit_time = 10000; // only 10s
 8000718:	f242 7310 	movw	r3, #10000	; 0x2710
 800071c:	603b      	str	r3, [r7, #0]


  setTimer3(50);
 800071e:	2032      	movs	r0, #50	; 0x32
 8000720:	f000 fe3a 	bl	8001398 <setTimer3>
  setTimer4(50);
 8000724:	2032      	movs	r0, #50	; 0x32
 8000726:	f000 fe65 	bl	80013f4 <setTimer4>
  setTimer5(100);
 800072a:	2064      	movs	r0, #100	; 0x64
 800072c:	f000 fe90 	bl	8001450 <setTimer5>

  int index = 4;
 8000730:	2304      	movs	r3, #4
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
  int index2 = 2;
 8000734:	2302      	movs	r3, #2
 8000736:	623b      	str	r3, [r7, #32]

  while (1)
  {
	  fsm_automatic_run_normally_1();
 8000738:	f7ff fe4c 	bl	80003d4 <fsm_automatic_run_normally_1>
	  fsm_automatic_run_normally_2();
 800073c:	f7ff ff08 	bl	8000550 <fsm_automatic_run_normally_2>


	  if(timer3_flag == 1){ // for control mode and count leds
 8000740:	4b66      	ldr	r3, [pc, #408]	; (80008dc <main+0x208>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d119      	bne.n	800077c <main+0xa8>
		  setTimer3(50);
 8000748:	2032      	movs	r0, #50	; 0x32
 800074a:	f000 fe25 	bl	8001398 <setTimer3>
		  displaySegment(index);
 800074e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000750:	f000 f8fe 	bl	8000950 <displaySegment>
		  if(index == 3){
 8000754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000756:	2b03      	cmp	r3, #3
 8000758:	d102      	bne.n	8000760 <main+0x8c>
			 display7SEG(mode);
 800075a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800075c:	f000 f950 	bl	8000a00 <display7SEG>
		  }
		  if(index == 4){
 8000760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000762:	2b04      	cmp	r3, #4
 8000764:	d102      	bne.n	800076c <main+0x98>
		  	 display7SEG(increase_time_in_led);
 8000766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000768:	f000 f94a 	bl	8000a00 <display7SEG>
		  }
		  index--;
 800076c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076e:	3b01      	subs	r3, #1
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
		  if(index < 3){
 8000772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000774:	2b02      	cmp	r3, #2
 8000776:	dc01      	bgt.n	800077c <main+0xa8>
			  index = 4;
 8000778:	2304      	movs	r3, #4
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
		  }
	  }

	  if(timer4_flag == 1){ // for control traffic leds
 800077c:	4b58      	ldr	r3, [pc, #352]	; (80008e0 <main+0x20c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d11d      	bne.n	80007c0 <main+0xec>
		  setTimer4(50);
 8000784:	2032      	movs	r0, #50	; 0x32
 8000786:	f000 fe35 	bl	80013f4 <setTimer4>
		  displaySegment1(index2);
 800078a:	6a38      	ldr	r0, [r7, #32]
 800078c:	f000 f90c 	bl	80009a8 <displaySegment1>
		  if(index2 == 1){
 8000790:	6a3b      	ldr	r3, [r7, #32]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d104      	bne.n	80007a0 <main+0xcc>
			 display7SEG2(led_time_1);
 8000796:	4b53      	ldr	r3, [pc, #332]	; (80008e4 <main+0x210>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fac0 	bl	8000d20 <display7SEG2>
		  }
		  if(index2 == 2){
 80007a0:	6a3b      	ldr	r3, [r7, #32]
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d104      	bne.n	80007b0 <main+0xdc>
		  	 display7SEG2(led_time_2);
 80007a6:	4b50      	ldr	r3, [pc, #320]	; (80008e8 <main+0x214>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fab8 	bl	8000d20 <display7SEG2>
		  }
		  index2--;
 80007b0:	6a3b      	ldr	r3, [r7, #32]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	623b      	str	r3, [r7, #32]
		  if(index2 < 1){
 80007b6:	6a3b      	ldr	r3, [r7, #32]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	dc01      	bgt.n	80007c0 <main+0xec>
		  	  index2 =2;
 80007bc:	2302      	movs	r3, #2
 80007be:	623b      	str	r3, [r7, #32]
		  }
	  }

	  if(timer5_flag == 1){
 80007c0:	4b4a      	ldr	r3, [pc, #296]	; (80008ec <main+0x218>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d109      	bne.n	80007dc <main+0x108>
		  led_time_1--;
 80007c8:	4b46      	ldr	r3, [pc, #280]	; (80008e4 <main+0x210>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	4a45      	ldr	r2, [pc, #276]	; (80008e4 <main+0x210>)
 80007d0:	6013      	str	r3, [r2, #0]
		  led_time_2--;
 80007d2:	4b45      	ldr	r3, [pc, #276]	; (80008e8 <main+0x214>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	4a43      	ldr	r2, [pc, #268]	; (80008e8 <main+0x214>)
 80007da:	6013      	str	r3, [r2, #0]
	  }


	  if(isButton1Pressed() == 1){
 80007dc:	f7ff fcb6 	bl	800014c <isButton1Pressed>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d118      	bne.n	8000818 <main+0x144>
		  // TODO
		  mode++;
 80007e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007e8:	3301      	adds	r3, #1
 80007ea:	62fb      	str	r3, [r7, #44]	; 0x2c
		  reset_led_each_button();
 80007ec:	f000 f88c 	bl	8000908 <reset_led_each_button>

		  if(mode == 5){
 80007f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007f2:	2b05      	cmp	r3, #5
 80007f4:	d101      	bne.n	80007fa <main+0x126>
			  mode = 1;
 80007f6:	2301      	movs	r3, #1
 80007f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		  }

		  // reset led
		  red_time = default_red;
 80007fa:	4a3d      	ldr	r2, [pc, #244]	; (80008f0 <main+0x21c>)
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	6013      	str	r3, [r2, #0]
		  green_time = default_green;
 8000800:	4a3c      	ldr	r2, [pc, #240]	; (80008f4 <main+0x220>)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6013      	str	r3, [r2, #0]
		  yellow_time = default_yellow;
 8000806:	4a3c      	ldr	r2, [pc, #240]	; (80008f8 <main+0x224>)
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	6013      	str	r3, [r2, #0]
		  status1 = INIT;
 800080c:	4b3b      	ldr	r3, [pc, #236]	; (80008fc <main+0x228>)
 800080e:	2201      	movs	r2, #1
 8000810:	601a      	str	r2, [r3, #0]
		  status2 = SECOND_INIT;
 8000812:	4b3b      	ldr	r3, [pc, #236]	; (8000900 <main+0x22c>)
 8000814:	2205      	movs	r2, #5
 8000816:	601a      	str	r2, [r3, #0]
	  }

	  if(isButton2Pressed() == 1){ // increase time in count but not update in count
 8000818:	f7ff fcaa 	bl	8000170 <isButton2Pressed>
 800081c:	4603      	mov	r3, r0
 800081e:	2b01      	cmp	r3, #1
 8000820:	d102      	bne.n	8000828 <main+0x154>
		  increase_time_in_led++;
 8000822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000824:	3301      	adds	r3, #1
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
	  }

	  if(isButton3Pressed() == 1){ // set increase time
 8000828:	f7ff fcb4 	bl	8000194 <isButton3Pressed>
 800082c:	4603      	mov	r3, r0
 800082e:	2b01      	cmp	r3, #1
 8000830:	d182      	bne.n	8000738 <main+0x64>
		  status1 = INIT;
 8000832:	4b32      	ldr	r3, [pc, #200]	; (80008fc <main+0x228>)
 8000834:	2201      	movs	r2, #1
 8000836:	601a      	str	r2, [r3, #0]
		  status2 = SECOND_INIT;
 8000838:	4b31      	ldr	r3, [pc, #196]	; (8000900 <main+0x22c>)
 800083a:	2205      	movs	r2, #5
 800083c:	601a      	str	r2, [r3, #0]
		  if(mode == 2){
 800083e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000840:	2b02      	cmp	r3, #2
 8000842:	d115      	bne.n	8000870 <main+0x19c>
			  red_time = (default_red + red_increase)%10; // + total
 8000844:	68fa      	ldr	r2, [r7, #12]
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	18d1      	adds	r1, r2, r3
 800084a:	4b2e      	ldr	r3, [pc, #184]	; (8000904 <main+0x230>)
 800084c:	fb83 2301 	smull	r2, r3, r3, r1
 8000850:	109a      	asrs	r2, r3, #2
 8000852:	17cb      	asrs	r3, r1, #31
 8000854:	1ad2      	subs	r2, r2, r3
 8000856:	4613      	mov	r3, r2
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	4413      	add	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	1aca      	subs	r2, r1, r3
 8000860:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <main+0x21c>)
 8000862:	601a      	str	r2, [r3, #0]
			  green_time = default_green;
 8000864:	4a23      	ldr	r2, [pc, #140]	; (80008f4 <main+0x220>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6013      	str	r3, [r2, #0]
			  yellow_time = default_yellow;
 800086a:	4a23      	ldr	r2, [pc, #140]	; (80008f8 <main+0x224>)
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	6013      	str	r3, [r2, #0]
		  }
		  if(mode == 3){
 8000870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000872:	2b03      	cmp	r3, #3
 8000874:	d115      	bne.n	80008a2 <main+0x1ce>
			  green_time = (default_green + green_increase)%10;
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	18d1      	adds	r1, r2, r3
 800087c:	4b21      	ldr	r3, [pc, #132]	; (8000904 <main+0x230>)
 800087e:	fb83 2301 	smull	r2, r3, r3, r1
 8000882:	109a      	asrs	r2, r3, #2
 8000884:	17cb      	asrs	r3, r1, #31
 8000886:	1ad2      	subs	r2, r2, r3
 8000888:	4613      	mov	r3, r2
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	4413      	add	r3, r2
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	1aca      	subs	r2, r1, r3
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <main+0x220>)
 8000894:	601a      	str	r2, [r3, #0]
			  red_time = default_red;
 8000896:	4a16      	ldr	r2, [pc, #88]	; (80008f0 <main+0x21c>)
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	6013      	str	r3, [r2, #0]
			  yellow_time = default_yellow;
 800089c:	4a16      	ldr	r2, [pc, #88]	; (80008f8 <main+0x224>)
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	6013      	str	r3, [r2, #0]
		  }
		  if(mode == 4){
 80008a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a4:	2b04      	cmp	r3, #4
 80008a6:	f47f af47 	bne.w	8000738 <main+0x64>
			  yellow_time = (default_yellow + yellow_increase)%10;
 80008aa:	68ba      	ldr	r2, [r7, #8]
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	18d1      	adds	r1, r2, r3
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <main+0x230>)
 80008b2:	fb83 2301 	smull	r2, r3, r3, r1
 80008b6:	109a      	asrs	r2, r3, #2
 80008b8:	17cb      	asrs	r3, r1, #31
 80008ba:	1ad2      	subs	r2, r2, r3
 80008bc:	4613      	mov	r3, r2
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	4413      	add	r3, r2
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	1aca      	subs	r2, r1, r3
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <main+0x224>)
 80008c8:	601a      	str	r2, [r3, #0]
			  red_time = default_red;
 80008ca:	4a09      	ldr	r2, [pc, #36]	; (80008f0 <main+0x21c>)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	6013      	str	r3, [r2, #0]
			  green_time = default_green;
 80008d0:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <main+0x220>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6013      	str	r3, [r2, #0]
	  fsm_automatic_run_normally_1();
 80008d6:	e72f      	b.n	8000738 <main+0x64>
 80008d8:	200000bc 	.word	0x200000bc
 80008dc:	20000098 	.word	0x20000098
 80008e0:	200000a0 	.word	0x200000a0
 80008e4:	200000b4 	.word	0x200000b4
 80008e8:	200000b8 	.word	0x200000b8
 80008ec:	200000a8 	.word	0x200000a8
 80008f0:	20000044 	.word	0x20000044
 80008f4:	20000048 	.word	0x20000048
 80008f8:	2000004c 	.word	0x2000004c
 80008fc:	2000003c 	.word	0x2000003c
 8000900:	20000040 	.word	0x20000040
 8000904:	66666667 	.word	0x66666667

08000908 <reset_led_each_button>:
  }
  /* USER CODE END 3 */
}


void reset_led_each_button(){
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	2102      	movs	r1, #2
 8000910:	480e      	ldr	r0, [pc, #56]	; (800094c <reset_led_each_button+0x44>)
 8000912:	f001 f99a 	bl	8001c4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2108      	movs	r1, #8
 800091a:	480c      	ldr	r0, [pc, #48]	; (800094c <reset_led_each_button+0x44>)
 800091c:	f001 f995 	bl	8001c4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	2104      	movs	r1, #4
 8000924:	4809      	ldr	r0, [pc, #36]	; (800094c <reset_led_each_button+0x44>)
 8000926:	f001 f990 	bl	8001c4a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2102      	movs	r1, #2
 800092e:	4807      	ldr	r0, [pc, #28]	; (800094c <reset_led_each_button+0x44>)
 8000930:	f001 f98b 	bl	8001c4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	2108      	movs	r1, #8
 8000938:	4804      	ldr	r0, [pc, #16]	; (800094c <reset_led_each_button+0x44>)
 800093a:	f001 f986 	bl	8001c4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2104      	movs	r1, #4
 8000942:	4802      	ldr	r0, [pc, #8]	; (800094c <reset_led_each_button+0x44>)
 8000944:	f001 f981 	bl	8001c4a <HAL_GPIO_WritePin>
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40010800 	.word	0x40010800

08000950 <displaySegment>:

void displaySegment(int number){
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	switch(number){
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b03      	cmp	r3, #3
 800095c:	d003      	beq.n	8000966 <displaySegment+0x16>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2b04      	cmp	r3, #4
 8000962:	d00d      	beq.n	8000980 <displaySegment+0x30>
				case 4:
					HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
					HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
					break;
			}
}
 8000964:	e019      	b.n	800099a <displaySegment+0x4a>
					HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800096c:	480d      	ldr	r0, [pc, #52]	; (80009a4 <displaySegment+0x54>)
 800096e:	f001 f96c 	bl	8001c4a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000972:	2201      	movs	r2, #1
 8000974:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000978:	480a      	ldr	r0, [pc, #40]	; (80009a4 <displaySegment+0x54>)
 800097a:	f001 f966 	bl	8001c4a <HAL_GPIO_WritePin>
					break;
 800097e:	e00c      	b.n	800099a <displaySegment+0x4a>
					HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000986:	4807      	ldr	r0, [pc, #28]	; (80009a4 <displaySegment+0x54>)
 8000988:	f001 f95f 	bl	8001c4a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000992:	4804      	ldr	r0, [pc, #16]	; (80009a4 <displaySegment+0x54>)
 8000994:	f001 f959 	bl	8001c4a <HAL_GPIO_WritePin>
					break;
 8000998:	bf00      	nop
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40010800 	.word	0x40010800

080009a8 <displaySegment1>:

void displaySegment1(int number){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	switch(number){
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d003      	beq.n	80009be <displaySegment1+0x16>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d00d      	beq.n	80009d8 <displaySegment1+0x30>
				case 2:
					HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
					HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
					break;
			}
}
 80009bc:	e019      	b.n	80009f2 <displaySegment1+0x4a>
					HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009c4:	480d      	ldr	r0, [pc, #52]	; (80009fc <displaySegment1+0x54>)
 80009c6:	f001 f940 	bl	8001c4a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d0:	480a      	ldr	r0, [pc, #40]	; (80009fc <displaySegment1+0x54>)
 80009d2:	f001 f93a 	bl	8001c4a <HAL_GPIO_WritePin>
					break;
 80009d6:	e00c      	b.n	80009f2 <displaySegment1+0x4a>
					HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009de:	4807      	ldr	r0, [pc, #28]	; (80009fc <displaySegment1+0x54>)
 80009e0:	f001 f933 	bl	8001c4a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ea:	4804      	ldr	r0, [pc, #16]	; (80009fc <displaySegment1+0x54>)
 80009ec:	f001 f92d 	bl	8001c4a <HAL_GPIO_WritePin>
					break;
 80009f0:	bf00      	nop
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40010800 	.word	0x40010800

08000a00 <display7SEG>:

void display7SEG(int number){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b09      	cmp	r3, #9
 8000a0c:	f200 8180 	bhi.w	8000d10 <display7SEG+0x310>
 8000a10:	a201      	add	r2, pc, #4	; (adr r2, 8000a18 <display7SEG+0x18>)
 8000a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a16:	bf00      	nop
 8000a18:	08000a41 	.word	0x08000a41
 8000a1c:	08000a89 	.word	0x08000a89
 8000a20:	08000ad1 	.word	0x08000ad1
 8000a24:	08000b19 	.word	0x08000b19
 8000a28:	08000b61 	.word	0x08000b61
 8000a2c:	08000ba9 	.word	0x08000ba9
 8000a30:	08000bf1 	.word	0x08000bf1
 8000a34:	08000c39 	.word	0x08000c39
 8000a38:	08000c81 	.word	0x08000c81
 8000a3c:	08000cc9 	.word	0x08000cc9

	switch(number) {
	    case 0:
	        HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2101      	movs	r1, #1
 8000a44:	48b5      	ldr	r0, [pc, #724]	; (8000d1c <display7SEG+0x31c>)
 8000a46:	f001 f900 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	48b3      	ldr	r0, [pc, #716]	; (8000d1c <display7SEG+0x31c>)
 8000a50:	f001 f8fb 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2104      	movs	r1, #4
 8000a58:	48b0      	ldr	r0, [pc, #704]	; (8000d1c <display7SEG+0x31c>)
 8000a5a:	f001 f8f6 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2108      	movs	r1, #8
 8000a62:	48ae      	ldr	r0, [pc, #696]	; (8000d1c <display7SEG+0x31c>)
 8000a64:	f001 f8f1 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2110      	movs	r1, #16
 8000a6c:	48ab      	ldr	r0, [pc, #684]	; (8000d1c <display7SEG+0x31c>)
 8000a6e:	f001 f8ec 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2120      	movs	r1, #32
 8000a76:	48a9      	ldr	r0, [pc, #676]	; (8000d1c <display7SEG+0x31c>)
 8000a78:	f001 f8e7 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	2140      	movs	r1, #64	; 0x40
 8000a80:	48a6      	ldr	r0, [pc, #664]	; (8000d1c <display7SEG+0x31c>)
 8000a82:	f001 f8e2 	bl	8001c4a <HAL_GPIO_WritePin>
	        break;
 8000a86:	e144      	b.n	8000d12 <display7SEG+0x312>
	    case 1:
	        HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	48a3      	ldr	r0, [pc, #652]	; (8000d1c <display7SEG+0x31c>)
 8000a8e:	f001 f8dc 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2102      	movs	r1, #2
 8000a96:	48a1      	ldr	r0, [pc, #644]	; (8000d1c <display7SEG+0x31c>)
 8000a98:	f001 f8d7 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2104      	movs	r1, #4
 8000aa0:	489e      	ldr	r0, [pc, #632]	; (8000d1c <display7SEG+0x31c>)
 8000aa2:	f001 f8d2 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2108      	movs	r1, #8
 8000aaa:	489c      	ldr	r0, [pc, #624]	; (8000d1c <display7SEG+0x31c>)
 8000aac:	f001 f8cd 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2110      	movs	r1, #16
 8000ab4:	4899      	ldr	r0, [pc, #612]	; (8000d1c <display7SEG+0x31c>)
 8000ab6:	f001 f8c8 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000aba:	2201      	movs	r2, #1
 8000abc:	2120      	movs	r1, #32
 8000abe:	4897      	ldr	r0, [pc, #604]	; (8000d1c <display7SEG+0x31c>)
 8000ac0:	f001 f8c3 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2140      	movs	r1, #64	; 0x40
 8000ac8:	4894      	ldr	r0, [pc, #592]	; (8000d1c <display7SEG+0x31c>)
 8000aca:	f001 f8be 	bl	8001c4a <HAL_GPIO_WritePin>
	        break;
 8000ace:	e120      	b.n	8000d12 <display7SEG+0x312>
	    case 2:
	        HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	4891      	ldr	r0, [pc, #580]	; (8000d1c <display7SEG+0x31c>)
 8000ad6:	f001 f8b8 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2102      	movs	r1, #2
 8000ade:	488f      	ldr	r0, [pc, #572]	; (8000d1c <display7SEG+0x31c>)
 8000ae0:	f001 f8b3 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2104      	movs	r1, #4
 8000ae8:	488c      	ldr	r0, [pc, #560]	; (8000d1c <display7SEG+0x31c>)
 8000aea:	f001 f8ae 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2108      	movs	r1, #8
 8000af2:	488a      	ldr	r0, [pc, #552]	; (8000d1c <display7SEG+0x31c>)
 8000af4:	f001 f8a9 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2110      	movs	r1, #16
 8000afc:	4887      	ldr	r0, [pc, #540]	; (8000d1c <display7SEG+0x31c>)
 8000afe:	f001 f8a4 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000b02:	2201      	movs	r2, #1
 8000b04:	2120      	movs	r1, #32
 8000b06:	4885      	ldr	r0, [pc, #532]	; (8000d1c <display7SEG+0x31c>)
 8000b08:	f001 f89f 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2140      	movs	r1, #64	; 0x40
 8000b10:	4882      	ldr	r0, [pc, #520]	; (8000d1c <display7SEG+0x31c>)
 8000b12:	f001 f89a 	bl	8001c4a <HAL_GPIO_WritePin>
	        break;
 8000b16:	e0fc      	b.n	8000d12 <display7SEG+0x312>
	    case 3:
	        HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	487f      	ldr	r0, [pc, #508]	; (8000d1c <display7SEG+0x31c>)
 8000b1e:	f001 f894 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2102      	movs	r1, #2
 8000b26:	487d      	ldr	r0, [pc, #500]	; (8000d1c <display7SEG+0x31c>)
 8000b28:	f001 f88f 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2104      	movs	r1, #4
 8000b30:	487a      	ldr	r0, [pc, #488]	; (8000d1c <display7SEG+0x31c>)
 8000b32:	f001 f88a 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2108      	movs	r1, #8
 8000b3a:	4878      	ldr	r0, [pc, #480]	; (8000d1c <display7SEG+0x31c>)
 8000b3c:	f001 f885 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2110      	movs	r1, #16
 8000b44:	4875      	ldr	r0, [pc, #468]	; (8000d1c <display7SEG+0x31c>)
 8000b46:	f001 f880 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2120      	movs	r1, #32
 8000b4e:	4873      	ldr	r0, [pc, #460]	; (8000d1c <display7SEG+0x31c>)
 8000b50:	f001 f87b 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2140      	movs	r1, #64	; 0x40
 8000b58:	4870      	ldr	r0, [pc, #448]	; (8000d1c <display7SEG+0x31c>)
 8000b5a:	f001 f876 	bl	8001c4a <HAL_GPIO_WritePin>
	        break;
 8000b5e:	e0d8      	b.n	8000d12 <display7SEG+0x312>
	    case 4:
	        HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	2101      	movs	r1, #1
 8000b64:	486d      	ldr	r0, [pc, #436]	; (8000d1c <display7SEG+0x31c>)
 8000b66:	f001 f870 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2102      	movs	r1, #2
 8000b6e:	486b      	ldr	r0, [pc, #428]	; (8000d1c <display7SEG+0x31c>)
 8000b70:	f001 f86b 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2104      	movs	r1, #4
 8000b78:	4868      	ldr	r0, [pc, #416]	; (8000d1c <display7SEG+0x31c>)
 8000b7a:	f001 f866 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2108      	movs	r1, #8
 8000b82:	4866      	ldr	r0, [pc, #408]	; (8000d1c <display7SEG+0x31c>)
 8000b84:	f001 f861 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2110      	movs	r1, #16
 8000b8c:	4863      	ldr	r0, [pc, #396]	; (8000d1c <display7SEG+0x31c>)
 8000b8e:	f001 f85c 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2120      	movs	r1, #32
 8000b96:	4861      	ldr	r0, [pc, #388]	; (8000d1c <display7SEG+0x31c>)
 8000b98:	f001 f857 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2140      	movs	r1, #64	; 0x40
 8000ba0:	485e      	ldr	r0, [pc, #376]	; (8000d1c <display7SEG+0x31c>)
 8000ba2:	f001 f852 	bl	8001c4a <HAL_GPIO_WritePin>
	        break;
 8000ba6:	e0b4      	b.n	8000d12 <display7SEG+0x312>
	    case 5:
	        HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2101      	movs	r1, #1
 8000bac:	485b      	ldr	r0, [pc, #364]	; (8000d1c <display7SEG+0x31c>)
 8000bae:	f001 f84c 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2102      	movs	r1, #2
 8000bb6:	4859      	ldr	r0, [pc, #356]	; (8000d1c <display7SEG+0x31c>)
 8000bb8:	f001 f847 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	4856      	ldr	r0, [pc, #344]	; (8000d1c <display7SEG+0x31c>)
 8000bc2:	f001 f842 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2108      	movs	r1, #8
 8000bca:	4854      	ldr	r0, [pc, #336]	; (8000d1c <display7SEG+0x31c>)
 8000bcc:	f001 f83d 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2110      	movs	r1, #16
 8000bd4:	4851      	ldr	r0, [pc, #324]	; (8000d1c <display7SEG+0x31c>)
 8000bd6:	f001 f838 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2120      	movs	r1, #32
 8000bde:	484f      	ldr	r0, [pc, #316]	; (8000d1c <display7SEG+0x31c>)
 8000be0:	f001 f833 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2140      	movs	r1, #64	; 0x40
 8000be8:	484c      	ldr	r0, [pc, #304]	; (8000d1c <display7SEG+0x31c>)
 8000bea:	f001 f82e 	bl	8001c4a <HAL_GPIO_WritePin>
	        break;
 8000bee:	e090      	b.n	8000d12 <display7SEG+0x312>
	    case 6:
	        HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	4849      	ldr	r0, [pc, #292]	; (8000d1c <display7SEG+0x31c>)
 8000bf6:	f001 f828 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	4847      	ldr	r0, [pc, #284]	; (8000d1c <display7SEG+0x31c>)
 8000c00:	f001 f823 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2104      	movs	r1, #4
 8000c08:	4844      	ldr	r0, [pc, #272]	; (8000d1c <display7SEG+0x31c>)
 8000c0a:	f001 f81e 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2108      	movs	r1, #8
 8000c12:	4842      	ldr	r0, [pc, #264]	; (8000d1c <display7SEG+0x31c>)
 8000c14:	f001 f819 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2110      	movs	r1, #16
 8000c1c:	483f      	ldr	r0, [pc, #252]	; (8000d1c <display7SEG+0x31c>)
 8000c1e:	f001 f814 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2120      	movs	r1, #32
 8000c26:	483d      	ldr	r0, [pc, #244]	; (8000d1c <display7SEG+0x31c>)
 8000c28:	f001 f80f 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2140      	movs	r1, #64	; 0x40
 8000c30:	483a      	ldr	r0, [pc, #232]	; (8000d1c <display7SEG+0x31c>)
 8000c32:	f001 f80a 	bl	8001c4a <HAL_GPIO_WritePin>
	        break;
 8000c36:	e06c      	b.n	8000d12 <display7SEG+0x312>
	    case 7:
	        HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	4837      	ldr	r0, [pc, #220]	; (8000d1c <display7SEG+0x31c>)
 8000c3e:	f001 f804 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2102      	movs	r1, #2
 8000c46:	4835      	ldr	r0, [pc, #212]	; (8000d1c <display7SEG+0x31c>)
 8000c48:	f000 ffff 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2104      	movs	r1, #4
 8000c50:	4832      	ldr	r0, [pc, #200]	; (8000d1c <display7SEG+0x31c>)
 8000c52:	f000 fffa 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000c56:	2201      	movs	r2, #1
 8000c58:	2108      	movs	r1, #8
 8000c5a:	4830      	ldr	r0, [pc, #192]	; (8000d1c <display7SEG+0x31c>)
 8000c5c:	f000 fff5 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	2110      	movs	r1, #16
 8000c64:	482d      	ldr	r0, [pc, #180]	; (8000d1c <display7SEG+0x31c>)
 8000c66:	f000 fff0 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2120      	movs	r1, #32
 8000c6e:	482b      	ldr	r0, [pc, #172]	; (8000d1c <display7SEG+0x31c>)
 8000c70:	f000 ffeb 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2140      	movs	r1, #64	; 0x40
 8000c78:	4828      	ldr	r0, [pc, #160]	; (8000d1c <display7SEG+0x31c>)
 8000c7a:	f000 ffe6 	bl	8001c4a <HAL_GPIO_WritePin>
	        break;
 8000c7e:	e048      	b.n	8000d12 <display7SEG+0x312>
	    case 8:
	        HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2101      	movs	r1, #1
 8000c84:	4825      	ldr	r0, [pc, #148]	; (8000d1c <display7SEG+0x31c>)
 8000c86:	f000 ffe0 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	4823      	ldr	r0, [pc, #140]	; (8000d1c <display7SEG+0x31c>)
 8000c90:	f000 ffdb 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2104      	movs	r1, #4
 8000c98:	4820      	ldr	r0, [pc, #128]	; (8000d1c <display7SEG+0x31c>)
 8000c9a:	f000 ffd6 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2108      	movs	r1, #8
 8000ca2:	481e      	ldr	r0, [pc, #120]	; (8000d1c <display7SEG+0x31c>)
 8000ca4:	f000 ffd1 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2110      	movs	r1, #16
 8000cac:	481b      	ldr	r0, [pc, #108]	; (8000d1c <display7SEG+0x31c>)
 8000cae:	f000 ffcc 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2120      	movs	r1, #32
 8000cb6:	4819      	ldr	r0, [pc, #100]	; (8000d1c <display7SEG+0x31c>)
 8000cb8:	f000 ffc7 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2140      	movs	r1, #64	; 0x40
 8000cc0:	4816      	ldr	r0, [pc, #88]	; (8000d1c <display7SEG+0x31c>)
 8000cc2:	f000 ffc2 	bl	8001c4a <HAL_GPIO_WritePin>
	        break;
 8000cc6:	e024      	b.n	8000d12 <display7SEG+0x312>
	    case 9:
	        HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2101      	movs	r1, #1
 8000ccc:	4813      	ldr	r0, [pc, #76]	; (8000d1c <display7SEG+0x31c>)
 8000cce:	f000 ffbc 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	4811      	ldr	r0, [pc, #68]	; (8000d1c <display7SEG+0x31c>)
 8000cd8:	f000 ffb7 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2104      	movs	r1, #4
 8000ce0:	480e      	ldr	r0, [pc, #56]	; (8000d1c <display7SEG+0x31c>)
 8000ce2:	f000 ffb2 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2108      	movs	r1, #8
 8000cea:	480c      	ldr	r0, [pc, #48]	; (8000d1c <display7SEG+0x31c>)
 8000cec:	f000 ffad 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2110      	movs	r1, #16
 8000cf4:	4809      	ldr	r0, [pc, #36]	; (8000d1c <display7SEG+0x31c>)
 8000cf6:	f000 ffa8 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2120      	movs	r1, #32
 8000cfe:	4807      	ldr	r0, [pc, #28]	; (8000d1c <display7SEG+0x31c>)
 8000d00:	f000 ffa3 	bl	8001c4a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2140      	movs	r1, #64	; 0x40
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <display7SEG+0x31c>)
 8000d0a:	f000 ff9e 	bl	8001c4a <HAL_GPIO_WritePin>
	        break;
 8000d0e:	e000      	b.n	8000d12 <display7SEG+0x312>
	    default:
	        // Handle invalid number
	        break;
 8000d10:	bf00      	nop
	}


}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40010c00 	.word	0x40010c00

08000d20 <display7SEG2>:


void display7SEG2(int number){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]

	if(number == 0){
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d128      	bne.n	8000d80 <display7SEG2+0x60>
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2180      	movs	r1, #128	; 0x80
 8000d32:	48d2      	ldr	r0, [pc, #840]	; (800107c <display7SEG2+0x35c>)
 8000d34:	f000 ff89 	bl	8001c4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d3e:	48cf      	ldr	r0, [pc, #828]	; (800107c <display7SEG2+0x35c>)
 8000d40:	f000 ff83 	bl	8001c4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d4a:	48cc      	ldr	r0, [pc, #816]	; (800107c <display7SEG2+0x35c>)
 8000d4c:	f000 ff7d 	bl	8001c4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d56:	48c9      	ldr	r0, [pc, #804]	; (800107c <display7SEG2+0x35c>)
 8000d58:	f000 ff77 	bl	8001c4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d62:	48c6      	ldr	r0, [pc, #792]	; (800107c <display7SEG2+0x35c>)
 8000d64:	f000 ff71 	bl	8001c4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d6e:	48c3      	ldr	r0, [pc, #780]	; (800107c <display7SEG2+0x35c>)
 8000d70:	f000 ff6b 	bl	8001c4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d7a:	48c0      	ldr	r0, [pc, #768]	; (800107c <display7SEG2+0x35c>)
 8000d7c:	f000 ff65 	bl	8001c4a <HAL_GPIO_WritePin>
	}

	if(number == 1){
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d128      	bne.n	8000dd8 <display7SEG2+0xb8>
	    HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, SET);
 8000d86:	2201      	movs	r2, #1
 8000d88:	2180      	movs	r1, #128	; 0x80
 8000d8a:	48bc      	ldr	r0, [pc, #752]	; (800107c <display7SEG2+0x35c>)
 8000d8c:	f000 ff5d 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d96:	48b9      	ldr	r0, [pc, #740]	; (800107c <display7SEG2+0x35c>)
 8000d98:	f000 ff57 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000da2:	48b6      	ldr	r0, [pc, #728]	; (800107c <display7SEG2+0x35c>)
 8000da4:	f000 ff51 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, SET);
 8000da8:	2201      	movs	r2, #1
 8000daa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dae:	48b3      	ldr	r0, [pc, #716]	; (800107c <display7SEG2+0x35c>)
 8000db0:	f000 ff4b 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dba:	48b0      	ldr	r0, [pc, #704]	; (800107c <display7SEG2+0x35c>)
 8000dbc:	f000 ff45 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dc6:	48ad      	ldr	r0, [pc, #692]	; (800107c <display7SEG2+0x35c>)
 8000dc8:	f000 ff3f 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd2:	48aa      	ldr	r0, [pc, #680]	; (800107c <display7SEG2+0x35c>)
 8000dd4:	f000 ff39 	bl	8001c4a <HAL_GPIO_WritePin>
	}


	if(number == 2){
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d128      	bne.n	8000e30 <display7SEG2+0x110>
	    HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2180      	movs	r1, #128	; 0x80
 8000de2:	48a6      	ldr	r0, [pc, #664]	; (800107c <display7SEG2+0x35c>)
 8000de4:	f000 ff31 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dee:	48a3      	ldr	r0, [pc, #652]	; (800107c <display7SEG2+0x35c>)
 8000df0:	f000 ff2b 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, SET); // set
 8000df4:	2201      	movs	r2, #1
 8000df6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dfa:	48a0      	ldr	r0, [pc, #640]	; (800107c <display7SEG2+0x35c>)
 8000dfc:	f000 ff25 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e06:	489d      	ldr	r0, [pc, #628]	; (800107c <display7SEG2+0x35c>)
 8000e08:	f000 ff1f 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e12:	489a      	ldr	r0, [pc, #616]	; (800107c <display7SEG2+0x35c>)
 8000e14:	f000 ff19 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, SET); // set
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e1e:	4897      	ldr	r0, [pc, #604]	; (800107c <display7SEG2+0x35c>)
 8000e20:	f000 ff13 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e2a:	4894      	ldr	r0, [pc, #592]	; (800107c <display7SEG2+0x35c>)
 8000e2c:	f000 ff0d 	bl	8001c4a <HAL_GPIO_WritePin>
	}


	if(number == 3){ // a b c d g
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	d128      	bne.n	8000e88 <display7SEG2+0x168>
	    HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2180      	movs	r1, #128	; 0x80
 8000e3a:	4890      	ldr	r0, [pc, #576]	; (800107c <display7SEG2+0x35c>)
 8000e3c:	f000 ff05 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e46:	488d      	ldr	r0, [pc, #564]	; (800107c <display7SEG2+0x35c>)
 8000e48:	f000 feff 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e52:	488a      	ldr	r0, [pc, #552]	; (800107c <display7SEG2+0x35c>)
 8000e54:	f000 fef9 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e5e:	4887      	ldr	r0, [pc, #540]	; (800107c <display7SEG2+0x35c>)
 8000e60:	f000 fef3 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 8000e64:	2201      	movs	r2, #1
 8000e66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e6a:	4884      	ldr	r0, [pc, #528]	; (800107c <display7SEG2+0x35c>)
 8000e6c:	f000 feed 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, SET);
 8000e70:	2201      	movs	r2, #1
 8000e72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e76:	4881      	ldr	r0, [pc, #516]	; (800107c <display7SEG2+0x35c>)
 8000e78:	f000 fee7 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e82:	487e      	ldr	r0, [pc, #504]	; (800107c <display7SEG2+0x35c>)
 8000e84:	f000 fee1 	bl	8001c4a <HAL_GPIO_WritePin>
	}

	if(number == 4){ // b c f g
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	d128      	bne.n	8000ee0 <display7SEG2+0x1c0>
	    HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, SET);
 8000e8e:	2201      	movs	r2, #1
 8000e90:	2180      	movs	r1, #128	; 0x80
 8000e92:	487a      	ldr	r0, [pc, #488]	; (800107c <display7SEG2+0x35c>)
 8000e94:	f000 fed9 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e9e:	4877      	ldr	r0, [pc, #476]	; (800107c <display7SEG2+0x35c>)
 8000ea0:	f000 fed3 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET); // set
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eaa:	4874      	ldr	r0, [pc, #464]	; (800107c <display7SEG2+0x35c>)
 8000eac:	f000 fecd 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb6:	4871      	ldr	r0, [pc, #452]	; (800107c <display7SEG2+0x35c>)
 8000eb8:	f000 fec7 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ec2:	486e      	ldr	r0, [pc, #440]	; (800107c <display7SEG2+0x35c>)
 8000ec4:	f000 fec1 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET); // set
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ece:	486b      	ldr	r0, [pc, #428]	; (800107c <display7SEG2+0x35c>)
 8000ed0:	f000 febb 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eda:	4868      	ldr	r0, [pc, #416]	; (800107c <display7SEG2+0x35c>)
 8000edc:	f000 feb5 	bl	8001c4a <HAL_GPIO_WritePin>
	}

	if(number == 5){ // a c d f g
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b05      	cmp	r3, #5
 8000ee4:	d128      	bne.n	8000f38 <display7SEG2+0x218>
	    HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2180      	movs	r1, #128	; 0x80
 8000eea:	4864      	ldr	r0, [pc, #400]	; (800107c <display7SEG2+0x35c>)
 8000eec:	f000 fead 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef6:	4861      	ldr	r0, [pc, #388]	; (800107c <display7SEG2+0x35c>)
 8000ef8:	f000 fea7 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f02:	485e      	ldr	r0, [pc, #376]	; (800107c <display7SEG2+0x35c>)
 8000f04:	f000 fea1 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f0e:	485b      	ldr	r0, [pc, #364]	; (800107c <display7SEG2+0x35c>)
 8000f10:	f000 fe9b 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f1a:	4858      	ldr	r0, [pc, #352]	; (800107c <display7SEG2+0x35c>)
 8000f1c:	f000 fe95 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f26:	4855      	ldr	r0, [pc, #340]	; (800107c <display7SEG2+0x35c>)
 8000f28:	f000 fe8f 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f32:	4852      	ldr	r0, [pc, #328]	; (800107c <display7SEG2+0x35c>)
 8000f34:	f000 fe89 	bl	8001c4a <HAL_GPIO_WritePin>
	}

	if(number == 6){
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	d128      	bne.n	8000f90 <display7SEG2+0x270>
	    HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2180      	movs	r1, #128	; 0x80
 8000f42:	484e      	ldr	r0, [pc, #312]	; (800107c <display7SEG2+0x35c>)
 8000f44:	f000 fe81 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f4e:	484b      	ldr	r0, [pc, #300]	; (800107c <display7SEG2+0x35c>)
 8000f50:	f000 fe7b 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET); // set
 8000f54:	2200      	movs	r2, #0
 8000f56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f5a:	4848      	ldr	r0, [pc, #288]	; (800107c <display7SEG2+0x35c>)
 8000f5c:	f000 fe75 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f66:	4845      	ldr	r0, [pc, #276]	; (800107c <display7SEG2+0x35c>)
 8000f68:	f000 fe6f 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f72:	4842      	ldr	r0, [pc, #264]	; (800107c <display7SEG2+0x35c>)
 8000f74:	f000 fe69 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET); // set
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f7e:	483f      	ldr	r0, [pc, #252]	; (800107c <display7SEG2+0x35c>)
 8000f80:	f000 fe63 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f8a:	483c      	ldr	r0, [pc, #240]	; (800107c <display7SEG2+0x35c>)
 8000f8c:	f000 fe5d 	bl	8001c4a <HAL_GPIO_WritePin>
	}

	if(number == 7){
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b07      	cmp	r3, #7
 8000f94:	d128      	bne.n	8000fe8 <display7SEG2+0x2c8>
	    HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2180      	movs	r1, #128	; 0x80
 8000f9a:	4838      	ldr	r0, [pc, #224]	; (800107c <display7SEG2+0x35c>)
 8000f9c:	f000 fe55 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa6:	4835      	ldr	r0, [pc, #212]	; (800107c <display7SEG2+0x35c>)
 8000fa8:	f000 fe4f 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb2:	4832      	ldr	r0, [pc, #200]	; (800107c <display7SEG2+0x35c>)
 8000fb4:	f000 fe49 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fbe:	482f      	ldr	r0, [pc, #188]	; (800107c <display7SEG2+0x35c>)
 8000fc0:	f000 fe43 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fca:	482c      	ldr	r0, [pc, #176]	; (800107c <display7SEG2+0x35c>)
 8000fcc:	f000 fe3d 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, SET);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fd6:	4829      	ldr	r0, [pc, #164]	; (800107c <display7SEG2+0x35c>)
 8000fd8:	f000 fe37 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe2:	4826      	ldr	r0, [pc, #152]	; (800107c <display7SEG2+0x35c>)
 8000fe4:	f000 fe31 	bl	8001c4a <HAL_GPIO_WritePin>
	}

	if(number == 8){
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b08      	cmp	r3, #8
 8000fec:	d128      	bne.n	8001040 <display7SEG2+0x320>
	    HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2180      	movs	r1, #128	; 0x80
 8000ff2:	4822      	ldr	r0, [pc, #136]	; (800107c <display7SEG2+0x35c>)
 8000ff4:	f000 fe29 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ffe:	481f      	ldr	r0, [pc, #124]	; (800107c <display7SEG2+0x35c>)
 8001000:	f000 fe23 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET); // set
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 7100 	mov.w	r1, #512	; 0x200
 800100a:	481c      	ldr	r0, [pc, #112]	; (800107c <display7SEG2+0x35c>)
 800100c:	f000 fe1d 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001016:	4819      	ldr	r0, [pc, #100]	; (800107c <display7SEG2+0x35c>)
 8001018:	f000 fe17 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001022:	4816      	ldr	r0, [pc, #88]	; (800107c <display7SEG2+0x35c>)
 8001024:	f000 fe11 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET); // set
 8001028:	2200      	movs	r2, #0
 800102a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102e:	4813      	ldr	r0, [pc, #76]	; (800107c <display7SEG2+0x35c>)
 8001030:	f000 fe0b 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800103a:	4810      	ldr	r0, [pc, #64]	; (800107c <display7SEG2+0x35c>)
 800103c:	f000 fe05 	bl	8001c4a <HAL_GPIO_WritePin>
	}

	if(number == 9){
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b09      	cmp	r3, #9
 8001044:	d12b      	bne.n	800109e <display7SEG2+0x37e>
	    HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	2180      	movs	r1, #128	; 0x80
 800104a:	480c      	ldr	r0, [pc, #48]	; (800107c <display7SEG2+0x35c>)
 800104c:	f000 fdfd 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001056:	4809      	ldr	r0, [pc, #36]	; (800107c <display7SEG2+0x35c>)
 8001058:	f000 fdf7 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001062:	4806      	ldr	r0, [pc, #24]	; (800107c <display7SEG2+0x35c>)
 8001064:	f000 fdf1 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800106e:	4803      	ldr	r0, [pc, #12]	; (800107c <display7SEG2+0x35c>)
 8001070:	f000 fdeb 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 8001074:	2201      	movs	r2, #1
 8001076:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800107a:	e001      	b.n	8001080 <display7SEG2+0x360>
 800107c:	40010c00 	.word	0x40010c00
 8001080:	4809      	ldr	r0, [pc, #36]	; (80010a8 <display7SEG2+0x388>)
 8001082:	f000 fde2 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108c:	4806      	ldr	r0, [pc, #24]	; (80010a8 <display7SEG2+0x388>)
 800108e:	f000 fddc 	bl	8001c4a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001098:	4803      	ldr	r0, [pc, #12]	; (80010a8 <display7SEG2+0x388>)
 800109a:	f000 fdd6 	bl	8001c4a <HAL_GPIO_WritePin>
	}


}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40010c00 	.word	0x40010c00

080010ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b090      	sub	sp, #64	; 0x40
 80010b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b2:	f107 0318 	add.w	r3, r7, #24
 80010b6:	2228      	movs	r2, #40	; 0x28
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f001 fdc6 	bl	8002c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ce:	2302      	movs	r3, #2
 80010d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d2:	2301      	movs	r3, #1
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d6:	2310      	movs	r3, #16
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010da:	2300      	movs	r3, #0
 80010dc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010de:	f107 0318 	add.w	r3, r7, #24
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 fdca 	bl	8001c7c <HAL_RCC_OscConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010ee:	f000 f8f1 	bl	80012d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f2:	230f      	movs	r3, #15
 80010f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f001 f836 	bl	800217c <HAL_RCC_ClockConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001116:	f000 f8dd 	bl	80012d4 <Error_Handler>
  }
}
 800111a:	bf00      	nop
 800111c:	3740      	adds	r7, #64	; 0x40
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001138:	463b      	mov	r3, r7
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001140:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <MX_TIM2_Init+0x94>)
 8001142:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001146:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_TIM2_Init+0x94>)
 800114a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800114e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <MX_TIM2_Init+0x94>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <MX_TIM2_Init+0x94>)
 8001158:	2209      	movs	r2, #9
 800115a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115c:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <MX_TIM2_Init+0x94>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_TIM2_Init+0x94>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001168:	4813      	ldr	r0, [pc, #76]	; (80011b8 <MX_TIM2_Init+0x94>)
 800116a:	f001 f963 	bl	8002434 <HAL_TIM_Base_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001174:	f000 f8ae 	bl	80012d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800117e:	f107 0308 	add.w	r3, r7, #8
 8001182:	4619      	mov	r1, r3
 8001184:	480c      	ldr	r0, [pc, #48]	; (80011b8 <MX_TIM2_Init+0x94>)
 8001186:	f001 faf9 	bl	800277c <HAL_TIM_ConfigClockSource>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001190:	f000 f8a0 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001194:	2300      	movs	r3, #0
 8001196:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800119c:	463b      	mov	r3, r7
 800119e:	4619      	mov	r1, r3
 80011a0:	4805      	ldr	r0, [pc, #20]	; (80011b8 <MX_TIM2_Init+0x94>)
 80011a2:	f001 fcc5 	bl	8002b30 <HAL_TIMEx_MasterConfigSynchronization>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011ac:	f000 f892 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011b0:	bf00      	nop
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200000bc 	.word	0x200000bc

080011bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d0:	4b2f      	ldr	r3, [pc, #188]	; (8001290 <MX_GPIO_Init+0xd4>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a2e      	ldr	r2, [pc, #184]	; (8001290 <MX_GPIO_Init+0xd4>)
 80011d6:	f043 0310 	orr.w	r3, r3, #16
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b2c      	ldr	r3, [pc, #176]	; (8001290 <MX_GPIO_Init+0xd4>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0310 	and.w	r3, r3, #16
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e8:	4b29      	ldr	r3, [pc, #164]	; (8001290 <MX_GPIO_Init+0xd4>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a28      	ldr	r2, [pc, #160]	; (8001290 <MX_GPIO_Init+0xd4>)
 80011ee:	f043 0304 	orr.w	r3, r3, #4
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b26      	ldr	r3, [pc, #152]	; (8001290 <MX_GPIO_Init+0xd4>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001200:	4b23      	ldr	r3, [pc, #140]	; (8001290 <MX_GPIO_Init+0xd4>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a22      	ldr	r2, [pc, #136]	; (8001290 <MX_GPIO_Init+0xd4>)
 8001206:	f043 0308 	orr.w	r3, r3, #8
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b20      	ldr	r3, [pc, #128]	; (8001290 <MX_GPIO_Init+0xd4>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f003 0308 	and.w	r3, r3, #8
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_SECOND_Pin
 8001218:	2200      	movs	r2, #0
 800121a:	f64f 017e 	movw	r1, #63614	; 0xf87e
 800121e:	481d      	ldr	r0, [pc, #116]	; (8001294 <MX_GPIO_Init+0xd8>)
 8001220:	f000 fd13 	bl	8001c4a <HAL_GPIO_WritePin>
                          |LED_YELLOW_SECOND_Pin|LED_GREEN_SECOND_Pin|EN4_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG10_Pin
 8001224:	2200      	movs	r2, #0
 8001226:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800122a:	481b      	ldr	r0, [pc, #108]	; (8001298 <MX_GPIO_Init+0xdc>)
 800122c:	f000 fd0d 	bl	8001c4a <HAL_GPIO_WritePin>
                          |SEG11_Pin|SEG12_Pin|SEG13_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|SEG7_Pin
                          |SEG8_Pin|SEG9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : INPUT1_Pin INPUT2_Pin INPUT3_Pin */
  GPIO_InitStruct.Pin = INPUT1_Pin|INPUT2_Pin|INPUT3_Pin;
 8001230:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001234:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800123a:	2301      	movs	r3, #1
 800123c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123e:	f107 0310 	add.w	r3, r7, #16
 8001242:	4619      	mov	r1, r3
 8001244:	4815      	ldr	r0, [pc, #84]	; (800129c <MX_GPIO_Init+0xe0>)
 8001246:	f000 fb6f 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin LED_RED_SECOND_Pin
                           LED_YELLOW_SECOND_Pin LED_GREEN_SECOND_Pin EN4_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_SECOND_Pin
 800124a:	f64f 037e 	movw	r3, #63614	; 0xf87e
 800124e:	613b      	str	r3, [r7, #16]
                          |LED_YELLOW_SECOND_Pin|LED_GREEN_SECOND_Pin|EN4_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001250:	2301      	movs	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2302      	movs	r3, #2
 800125a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	4619      	mov	r1, r3
 8001262:	480c      	ldr	r0, [pc, #48]	; (8001294 <MX_GPIO_Init+0xd8>)
 8001264:	f000 fb60 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG10_Pin
                           SEG11_Pin SEG12_Pin SEG13_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin SEG7_Pin
                           SEG8_Pin SEG9_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG10_Pin
 8001268:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800126c:	613b      	str	r3, [r7, #16]
                          |SEG11_Pin|SEG12_Pin|SEG13_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|SEG7_Pin
                          |SEG8_Pin|SEG9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126e:	2301      	movs	r3, #1
 8001270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2302      	movs	r3, #2
 8001278:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127a:	f107 0310 	add.w	r3, r7, #16
 800127e:	4619      	mov	r1, r3
 8001280:	4805      	ldr	r0, [pc, #20]	; (8001298 <MX_GPIO_Init+0xdc>)
 8001282:	f000 fb51 	bl	8001928 <HAL_GPIO_Init>

}
 8001286:	bf00      	nop
 8001288:	3720      	adds	r7, #32
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40021000 	.word	0x40021000
 8001294:	40010800 	.word	0x40010800
 8001298:	40010c00 	.word	0x40010c00
 800129c:	40011000 	.word	0x40011000

080012a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	timer1Run();
 80012a8:	f000 f82e 	bl	8001308 <timer1Run>
	timer2Run();
 80012ac:	f000 f85a 	bl	8001364 <timer2Run>
	timer3Run();
 80012b0:	f000 f886 	bl	80013c0 <timer3Run>
	timer4Run();
 80012b4:	f000 f8b2 	bl	800141c <timer4Run>
	timer5Run();
 80012b8:	f000 f8de 	bl	8001478 <timer5Run>
	timer6Run();
 80012bc:	f000 f8f6 	bl	80014ac <timer6Run>
	getKeyInput1();
 80012c0:	f7fe ff9e 	bl	8000200 <getKeyInput1>
	getKeyInput2();
 80012c4:	f7fe ffea 	bl	800029c <getKeyInput2>
	getKeyInput3();
 80012c8:	f7ff f836 	bl	8000338 <getKeyInput3>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d8:	b672      	cpsid	i
}
 80012da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012dc:	e7fe      	b.n	80012dc <Error_Handler+0x8>
	...

080012e0 <setTimer1>:

int timer6_counter = 0;
int timer6_flag = 0;


void setTimer1(int duration){
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 80012e8:	4a05      	ldr	r2, [pc, #20]	; (8001300 <setTimer1+0x20>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6013      	str	r3, [r2, #0]
	timer1_flag =0;
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <setTimer1+0x24>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000084 	.word	0x20000084
 8001304:	20000088 	.word	0x20000088

08001308 <timer1Run>:
void timer1Run(){
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
	if(timer1_counter >0){
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <timer1Run+0x2c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	dd0b      	ble.n	800132c <timer1Run+0x24>
		timer1_counter--;
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <timer1Run+0x2c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	3b01      	subs	r3, #1
 800131a:	4a06      	ldr	r2, [pc, #24]	; (8001334 <timer1Run+0x2c>)
 800131c:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <timer1Run+0x2c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	dc02      	bgt.n	800132c <timer1Run+0x24>
			timer1_flag = 1;
 8001326:	4b04      	ldr	r3, [pc, #16]	; (8001338 <timer1Run+0x30>)
 8001328:	2201      	movs	r2, #1
 800132a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	20000084 	.word	0x20000084
 8001338:	20000088 	.word	0x20000088

0800133c <setTimer2>:


void setTimer2(int duration){
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8001344:	4a05      	ldr	r2, [pc, #20]	; (800135c <setTimer2+0x20>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
	timer2_flag =0;
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <setTimer2+0x24>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	2000008c 	.word	0x2000008c
 8001360:	20000090 	.word	0x20000090

08001364 <timer2Run>:
void timer2Run(){
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
	if(timer2_counter >0){
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <timer2Run+0x2c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	dd0b      	ble.n	8001388 <timer2Run+0x24>
		timer2_counter--;
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <timer2Run+0x2c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3b01      	subs	r3, #1
 8001376:	4a06      	ldr	r2, [pc, #24]	; (8001390 <timer2Run+0x2c>)
 8001378:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <timer2Run+0x2c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	dc02      	bgt.n	8001388 <timer2Run+0x24>
			timer2_flag = 1;
 8001382:	4b04      	ldr	r3, [pc, #16]	; (8001394 <timer2Run+0x30>)
 8001384:	2201      	movs	r2, #1
 8001386:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	2000008c 	.word	0x2000008c
 8001394:	20000090 	.word	0x20000090

08001398 <setTimer3>:


void setTimer3(int duration){
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 80013a0:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <setTimer3+0x20>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6013      	str	r3, [r2, #0]
	timer3_flag =0;
 80013a6:	4b05      	ldr	r3, [pc, #20]	; (80013bc <setTimer3+0x24>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000094 	.word	0x20000094
 80013bc:	20000098 	.word	0x20000098

080013c0 <timer3Run>:
void timer3Run(){
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
	if(timer3_counter >0){
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <timer3Run+0x2c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	dd0b      	ble.n	80013e4 <timer3Run+0x24>
		timer3_counter--;
 80013cc:	4b07      	ldr	r3, [pc, #28]	; (80013ec <timer3Run+0x2c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	4a06      	ldr	r2, [pc, #24]	; (80013ec <timer3Run+0x2c>)
 80013d4:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <timer3Run+0x2c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	dc02      	bgt.n	80013e4 <timer3Run+0x24>
			timer3_flag = 1;
 80013de:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <timer3Run+0x30>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	601a      	str	r2, [r3, #0]
		}
	}
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	20000094 	.word	0x20000094
 80013f0:	20000098 	.word	0x20000098

080013f4 <setTimer4>:

void setTimer4(int duration){
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 80013fc:	4a05      	ldr	r2, [pc, #20]	; (8001414 <setTimer4+0x20>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6013      	str	r3, [r2, #0]
	timer4_flag =0;
 8001402:	4b05      	ldr	r3, [pc, #20]	; (8001418 <setTimer4+0x24>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	2000009c 	.word	0x2000009c
 8001418:	200000a0 	.word	0x200000a0

0800141c <timer4Run>:
void timer4Run(){
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
	if(timer4_counter >0){
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <timer4Run+0x2c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	dd0b      	ble.n	8001440 <timer4Run+0x24>
		timer4_counter--;
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <timer4Run+0x2c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3b01      	subs	r3, #1
 800142e:	4a06      	ldr	r2, [pc, #24]	; (8001448 <timer4Run+0x2c>)
 8001430:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8001432:	4b05      	ldr	r3, [pc, #20]	; (8001448 <timer4Run+0x2c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	dc02      	bgt.n	8001440 <timer4Run+0x24>
			timer4_flag = 1;
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <timer4Run+0x30>)
 800143c:	2201      	movs	r2, #1
 800143e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	2000009c 	.word	0x2000009c
 800144c:	200000a0 	.word	0x200000a0

08001450 <setTimer5>:

void setTimer5(int duration){
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	timer5_counter = duration;
 8001458:	4a05      	ldr	r2, [pc, #20]	; (8001470 <setTimer5+0x20>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6013      	str	r3, [r2, #0]
	timer5_flag =0;
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <setTimer5+0x24>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	200000a4 	.word	0x200000a4
 8001474:	200000a8 	.word	0x200000a8

08001478 <timer5Run>:
void timer5Run(){
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
	if(timer5_counter >0){
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <timer5Run+0x2c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	dd0b      	ble.n	800149c <timer5Run+0x24>
		timer5_counter--;
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <timer5Run+0x2c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	3b01      	subs	r3, #1
 800148a:	4a06      	ldr	r2, [pc, #24]	; (80014a4 <timer5Run+0x2c>)
 800148c:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0){
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <timer5Run+0x2c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	dc02      	bgt.n	800149c <timer5Run+0x24>
			timer5_flag = 1;
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <timer5Run+0x30>)
 8001498:	2201      	movs	r2, #1
 800149a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	200000a4 	.word	0x200000a4
 80014a8:	200000a8 	.word	0x200000a8

080014ac <timer6Run>:

void setTimer6(int duration){
	timer6_counter = duration;
	timer6_flag =0;
}
void timer6Run(){
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
	if(timer6_counter >0){
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <timer6Run+0x2c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	dd0b      	ble.n	80014d0 <timer6Run+0x24>
		timer6_counter--;
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <timer6Run+0x2c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	3b01      	subs	r3, #1
 80014be:	4a06      	ldr	r2, [pc, #24]	; (80014d8 <timer6Run+0x2c>)
 80014c0:	6013      	str	r3, [r2, #0]
		if(timer6_counter <= 0){
 80014c2:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <timer6Run+0x2c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	dc02      	bgt.n	80014d0 <timer6Run+0x24>
			timer6_flag = 1;
 80014ca:	4b04      	ldr	r3, [pc, #16]	; (80014dc <timer6Run+0x30>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]
		}
	}
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	200000ac 	.word	0x200000ac
 80014dc:	200000b0 	.word	0x200000b0

080014e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_MspInit+0x5c>)
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	4a14      	ldr	r2, [pc, #80]	; (800153c <HAL_MspInit+0x5c>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6193      	str	r3, [r2, #24]
 80014f2:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_MspInit+0x5c>)
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <HAL_MspInit+0x5c>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	4a0e      	ldr	r2, [pc, #56]	; (800153c <HAL_MspInit+0x5c>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	61d3      	str	r3, [r2, #28]
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <HAL_MspInit+0x5c>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001516:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <HAL_MspInit+0x60>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	4a04      	ldr	r2, [pc, #16]	; (8001540 <HAL_MspInit+0x60>)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001532:	bf00      	nop
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	40021000 	.word	0x40021000
 8001540:	40010000 	.word	0x40010000

08001544 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001554:	d113      	bne.n	800157e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <HAL_TIM_Base_MspInit+0x44>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	4a0b      	ldr	r2, [pc, #44]	; (8001588 <HAL_TIM_Base_MspInit+0x44>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	61d3      	str	r3, [r2, #28]
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_TIM_Base_MspInit+0x44>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	201c      	movs	r0, #28
 8001574:	f000 f9a1 	bl	80018ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001578:	201c      	movs	r0, #28
 800157a:	f000 f9ba 	bl	80018f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40021000 	.word	0x40021000

0800158c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <NMI_Handler+0x4>

08001592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <HardFault_Handler+0x4>

08001598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <MemManage_Handler+0x4>

0800159e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <BusFault_Handler+0x4>

080015a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <UsageFault_Handler+0x4>

080015aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr

080015b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr

080015c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr

080015ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d2:	f000 f87f 	bl	80016d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <TIM2_IRQHandler+0x10>)
 80015e2:	f000 ffc3 	bl	800256c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200000bc 	.word	0x200000bc

080015f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015fc:	f7ff fff8 	bl	80015f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001600:	480b      	ldr	r0, [pc, #44]	; (8001630 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001602:	490c      	ldr	r1, [pc, #48]	; (8001634 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001604:	4a0c      	ldr	r2, [pc, #48]	; (8001638 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001608:	e002      	b.n	8001610 <LoopCopyDataInit>

0800160a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800160c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160e:	3304      	adds	r3, #4

08001610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001614:	d3f9      	bcc.n	800160a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001616:	4a09      	ldr	r2, [pc, #36]	; (800163c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001618:	4c09      	ldr	r4, [pc, #36]	; (8001640 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800161c:	e001      	b.n	8001622 <LoopFillZerobss>

0800161e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001620:	3204      	adds	r2, #4

08001622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001624:	d3fb      	bcc.n	800161e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001626:	f001 faed 	bl	8002c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800162a:	f7ff f853 	bl	80006d4 <main>
  bx lr
 800162e:	4770      	bx	lr
  ldr r0, =_sdata
 8001630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001634:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001638:	08002ca0 	.word	0x08002ca0
  ldr r2, =_sbss
 800163c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001640:	20000108 	.word	0x20000108

08001644 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001644:	e7fe      	b.n	8001644 <ADC1_2_IRQHandler>
	...

08001648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HAL_Init+0x28>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a07      	ldr	r2, [pc, #28]	; (8001670 <HAL_Init+0x28>)
 8001652:	f043 0310 	orr.w	r3, r3, #16
 8001656:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001658:	2003      	movs	r0, #3
 800165a:	f000 f923 	bl	80018a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800165e:	200f      	movs	r0, #15
 8001660:	f000 f808 	bl	8001674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001664:	f7ff ff3c 	bl	80014e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40022000 	.word	0x40022000

08001674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_InitTick+0x54>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_InitTick+0x58>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	4619      	mov	r1, r3
 8001686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168a:	fbb3 f3f1 	udiv	r3, r3, r1
 800168e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001692:	4618      	mov	r0, r3
 8001694:	f000 f93b 	bl	800190e <HAL_SYSTICK_Config>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e00e      	b.n	80016c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b0f      	cmp	r3, #15
 80016a6:	d80a      	bhi.n	80016be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a8:	2200      	movs	r2, #0
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295
 80016b0:	f000 f903 	bl	80018ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b4:	4a06      	ldr	r2, [pc, #24]	; (80016d0 <HAL_InitTick+0x5c>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e000      	b.n	80016c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000050 	.word	0x20000050
 80016cc:	20000058 	.word	0x20000058
 80016d0:	20000054 	.word	0x20000054

080016d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_IncTick+0x1c>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <HAL_IncTick+0x20>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	4a03      	ldr	r2, [pc, #12]	; (80016f4 <HAL_IncTick+0x20>)
 80016e6:	6013      	str	r3, [r2, #0]
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	20000058 	.word	0x20000058
 80016f4:	20000104 	.word	0x20000104

080016f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return uwTick;
 80016fc:	4b02      	ldr	r3, [pc, #8]	; (8001708 <HAL_GetTick+0x10>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	20000104 	.word	0x20000104

0800170c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <__NVIC_SetPriorityGrouping+0x44>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001728:	4013      	ands	r3, r2
 800172a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800173c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800173e:	4a04      	ldr	r2, [pc, #16]	; (8001750 <__NVIC_SetPriorityGrouping+0x44>)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	60d3      	str	r3, [r2, #12]
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <__NVIC_GetPriorityGrouping+0x18>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	0a1b      	lsrs	r3, r3, #8
 800175e:	f003 0307 	and.w	r3, r3, #7
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	2b00      	cmp	r3, #0
 8001780:	db0b      	blt.n	800179a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	f003 021f 	and.w	r2, r3, #31
 8001788:	4906      	ldr	r1, [pc, #24]	; (80017a4 <__NVIC_EnableIRQ+0x34>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	095b      	lsrs	r3, r3, #5
 8001790:	2001      	movs	r0, #1
 8001792:	fa00 f202 	lsl.w	r2, r0, r2
 8001796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr
 80017a4:	e000e100 	.word	0xe000e100

080017a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	db0a      	blt.n	80017d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	490c      	ldr	r1, [pc, #48]	; (80017f4 <__NVIC_SetPriority+0x4c>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	0112      	lsls	r2, r2, #4
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	440b      	add	r3, r1
 80017cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d0:	e00a      	b.n	80017e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4908      	ldr	r1, [pc, #32]	; (80017f8 <__NVIC_SetPriority+0x50>)
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	3b04      	subs	r3, #4
 80017e0:	0112      	lsls	r2, r2, #4
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	440b      	add	r3, r1
 80017e6:	761a      	strb	r2, [r3, #24]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000e100 	.word	0xe000e100
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b089      	sub	sp, #36	; 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f1c3 0307 	rsb	r3, r3, #7
 8001816:	2b04      	cmp	r3, #4
 8001818:	bf28      	it	cs
 800181a:	2304      	movcs	r3, #4
 800181c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3304      	adds	r3, #4
 8001822:	2b06      	cmp	r3, #6
 8001824:	d902      	bls.n	800182c <NVIC_EncodePriority+0x30>
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3b03      	subs	r3, #3
 800182a:	e000      	b.n	800182e <NVIC_EncodePriority+0x32>
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	f04f 32ff 	mov.w	r2, #4294967295
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43da      	mvns	r2, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	401a      	ands	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001844:	f04f 31ff 	mov.w	r1, #4294967295
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fa01 f303 	lsl.w	r3, r1, r3
 800184e:	43d9      	mvns	r1, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	4313      	orrs	r3, r2
         );
}
 8001856:	4618      	mov	r0, r3
 8001858:	3724      	adds	r7, #36	; 0x24
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b01      	subs	r3, #1
 800186c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001870:	d301      	bcc.n	8001876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001872:	2301      	movs	r3, #1
 8001874:	e00f      	b.n	8001896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001876:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <SysTick_Config+0x40>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3b01      	subs	r3, #1
 800187c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800187e:	210f      	movs	r1, #15
 8001880:	f04f 30ff 	mov.w	r0, #4294967295
 8001884:	f7ff ff90 	bl	80017a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <SysTick_Config+0x40>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800188e:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <SysTick_Config+0x40>)
 8001890:	2207      	movs	r2, #7
 8001892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	e000e010 	.word	0xe000e010

080018a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff2d 	bl	800170c <__NVIC_SetPriorityGrouping>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b086      	sub	sp, #24
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018cc:	f7ff ff42 	bl	8001754 <__NVIC_GetPriorityGrouping>
 80018d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	68b9      	ldr	r1, [r7, #8]
 80018d6:	6978      	ldr	r0, [r7, #20]
 80018d8:	f7ff ff90 	bl	80017fc <NVIC_EncodePriority>
 80018dc:	4602      	mov	r2, r0
 80018de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e2:	4611      	mov	r1, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff5f 	bl	80017a8 <__NVIC_SetPriority>
}
 80018ea:	bf00      	nop
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff35 	bl	8001770 <__NVIC_EnableIRQ>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ffa2 	bl	8001860 <SysTick_Config>
 800191c:	4603      	mov	r3, r0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001928:	b480      	push	{r7}
 800192a:	b08b      	sub	sp, #44	; 0x2c
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001932:	2300      	movs	r3, #0
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001936:	2300      	movs	r3, #0
 8001938:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193a:	e148      	b.n	8001bce <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800193c:	2201      	movs	r2, #1
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	429a      	cmp	r2, r3
 8001956:	f040 8137 	bne.w	8001bc8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4aa3      	ldr	r2, [pc, #652]	; (8001bec <HAL_GPIO_Init+0x2c4>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d05e      	beq.n	8001a22 <HAL_GPIO_Init+0xfa>
 8001964:	4aa1      	ldr	r2, [pc, #644]	; (8001bec <HAL_GPIO_Init+0x2c4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d875      	bhi.n	8001a56 <HAL_GPIO_Init+0x12e>
 800196a:	4aa1      	ldr	r2, [pc, #644]	; (8001bf0 <HAL_GPIO_Init+0x2c8>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d058      	beq.n	8001a22 <HAL_GPIO_Init+0xfa>
 8001970:	4a9f      	ldr	r2, [pc, #636]	; (8001bf0 <HAL_GPIO_Init+0x2c8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d86f      	bhi.n	8001a56 <HAL_GPIO_Init+0x12e>
 8001976:	4a9f      	ldr	r2, [pc, #636]	; (8001bf4 <HAL_GPIO_Init+0x2cc>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d052      	beq.n	8001a22 <HAL_GPIO_Init+0xfa>
 800197c:	4a9d      	ldr	r2, [pc, #628]	; (8001bf4 <HAL_GPIO_Init+0x2cc>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d869      	bhi.n	8001a56 <HAL_GPIO_Init+0x12e>
 8001982:	4a9d      	ldr	r2, [pc, #628]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d04c      	beq.n	8001a22 <HAL_GPIO_Init+0xfa>
 8001988:	4a9b      	ldr	r2, [pc, #620]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d863      	bhi.n	8001a56 <HAL_GPIO_Init+0x12e>
 800198e:	4a9b      	ldr	r2, [pc, #620]	; (8001bfc <HAL_GPIO_Init+0x2d4>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d046      	beq.n	8001a22 <HAL_GPIO_Init+0xfa>
 8001994:	4a99      	ldr	r2, [pc, #612]	; (8001bfc <HAL_GPIO_Init+0x2d4>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d85d      	bhi.n	8001a56 <HAL_GPIO_Init+0x12e>
 800199a:	2b12      	cmp	r3, #18
 800199c:	d82a      	bhi.n	80019f4 <HAL_GPIO_Init+0xcc>
 800199e:	2b12      	cmp	r3, #18
 80019a0:	d859      	bhi.n	8001a56 <HAL_GPIO_Init+0x12e>
 80019a2:	a201      	add	r2, pc, #4	; (adr r2, 80019a8 <HAL_GPIO_Init+0x80>)
 80019a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a8:	08001a23 	.word	0x08001a23
 80019ac:	080019fd 	.word	0x080019fd
 80019b0:	08001a0f 	.word	0x08001a0f
 80019b4:	08001a51 	.word	0x08001a51
 80019b8:	08001a57 	.word	0x08001a57
 80019bc:	08001a57 	.word	0x08001a57
 80019c0:	08001a57 	.word	0x08001a57
 80019c4:	08001a57 	.word	0x08001a57
 80019c8:	08001a57 	.word	0x08001a57
 80019cc:	08001a57 	.word	0x08001a57
 80019d0:	08001a57 	.word	0x08001a57
 80019d4:	08001a57 	.word	0x08001a57
 80019d8:	08001a57 	.word	0x08001a57
 80019dc:	08001a57 	.word	0x08001a57
 80019e0:	08001a57 	.word	0x08001a57
 80019e4:	08001a57 	.word	0x08001a57
 80019e8:	08001a57 	.word	0x08001a57
 80019ec:	08001a05 	.word	0x08001a05
 80019f0:	08001a19 	.word	0x08001a19
 80019f4:	4a82      	ldr	r2, [pc, #520]	; (8001c00 <HAL_GPIO_Init+0x2d8>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d013      	beq.n	8001a22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019fa:	e02c      	b.n	8001a56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	623b      	str	r3, [r7, #32]
          break;
 8001a02:	e029      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	623b      	str	r3, [r7, #32]
          break;
 8001a0c:	e024      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	3308      	adds	r3, #8
 8001a14:	623b      	str	r3, [r7, #32]
          break;
 8001a16:	e01f      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	330c      	adds	r3, #12
 8001a1e:	623b      	str	r3, [r7, #32]
          break;
 8001a20:	e01a      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d102      	bne.n	8001a30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a2a:	2304      	movs	r3, #4
 8001a2c:	623b      	str	r3, [r7, #32]
          break;
 8001a2e:	e013      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d105      	bne.n	8001a44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a38:	2308      	movs	r3, #8
 8001a3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69fa      	ldr	r2, [r7, #28]
 8001a40:	611a      	str	r2, [r3, #16]
          break;
 8001a42:	e009      	b.n	8001a58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a44:	2308      	movs	r3, #8
 8001a46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69fa      	ldr	r2, [r7, #28]
 8001a4c:	615a      	str	r2, [r3, #20]
          break;
 8001a4e:	e003      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a50:	2300      	movs	r3, #0
 8001a52:	623b      	str	r3, [r7, #32]
          break;
 8001a54:	e000      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          break;
 8001a56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	2bff      	cmp	r3, #255	; 0xff
 8001a5c:	d801      	bhi.n	8001a62 <HAL_GPIO_Init+0x13a>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	e001      	b.n	8001a66 <HAL_GPIO_Init+0x13e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3304      	adds	r3, #4
 8001a66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2bff      	cmp	r3, #255	; 0xff
 8001a6c:	d802      	bhi.n	8001a74 <HAL_GPIO_Init+0x14c>
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	e002      	b.n	8001a7a <HAL_GPIO_Init+0x152>
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	3b08      	subs	r3, #8
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	210f      	movs	r1, #15
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	fa01 f303 	lsl.w	r3, r1, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	6a39      	ldr	r1, [r7, #32]
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	431a      	orrs	r2, r3
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 8090 	beq.w	8001bc8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001aa8:	4b56      	ldr	r3, [pc, #344]	; (8001c04 <HAL_GPIO_Init+0x2dc>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	4a55      	ldr	r2, [pc, #340]	; (8001c04 <HAL_GPIO_Init+0x2dc>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6193      	str	r3, [r2, #24]
 8001ab4:	4b53      	ldr	r3, [pc, #332]	; (8001c04 <HAL_GPIO_Init+0x2dc>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ac0:	4a51      	ldr	r2, [pc, #324]	; (8001c08 <HAL_GPIO_Init+0x2e0>)
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	089b      	lsrs	r3, r3, #2
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001acc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	220f      	movs	r2, #15
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a49      	ldr	r2, [pc, #292]	; (8001c0c <HAL_GPIO_Init+0x2e4>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d00d      	beq.n	8001b08 <HAL_GPIO_Init+0x1e0>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a48      	ldr	r2, [pc, #288]	; (8001c10 <HAL_GPIO_Init+0x2e8>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d007      	beq.n	8001b04 <HAL_GPIO_Init+0x1dc>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a47      	ldr	r2, [pc, #284]	; (8001c14 <HAL_GPIO_Init+0x2ec>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d101      	bne.n	8001b00 <HAL_GPIO_Init+0x1d8>
 8001afc:	2302      	movs	r3, #2
 8001afe:	e004      	b.n	8001b0a <HAL_GPIO_Init+0x1e2>
 8001b00:	2303      	movs	r3, #3
 8001b02:	e002      	b.n	8001b0a <HAL_GPIO_Init+0x1e2>
 8001b04:	2301      	movs	r3, #1
 8001b06:	e000      	b.n	8001b0a <HAL_GPIO_Init+0x1e2>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b0c:	f002 0203 	and.w	r2, r2, #3
 8001b10:	0092      	lsls	r2, r2, #2
 8001b12:	4093      	lsls	r3, r2
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b1a:	493b      	ldr	r1, [pc, #236]	; (8001c08 <HAL_GPIO_Init+0x2e0>)
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	089b      	lsrs	r3, r3, #2
 8001b20:	3302      	adds	r3, #2
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d006      	beq.n	8001b42 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b34:	4b38      	ldr	r3, [pc, #224]	; (8001c18 <HAL_GPIO_Init+0x2f0>)
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	4937      	ldr	r1, [pc, #220]	; (8001c18 <HAL_GPIO_Init+0x2f0>)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	608b      	str	r3, [r1, #8]
 8001b40:	e006      	b.n	8001b50 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b42:	4b35      	ldr	r3, [pc, #212]	; (8001c18 <HAL_GPIO_Init+0x2f0>)
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	4933      	ldr	r1, [pc, #204]	; (8001c18 <HAL_GPIO_Init+0x2f0>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d006      	beq.n	8001b6a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b5c:	4b2e      	ldr	r3, [pc, #184]	; (8001c18 <HAL_GPIO_Init+0x2f0>)
 8001b5e:	68da      	ldr	r2, [r3, #12]
 8001b60:	492d      	ldr	r1, [pc, #180]	; (8001c18 <HAL_GPIO_Init+0x2f0>)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	60cb      	str	r3, [r1, #12]
 8001b68:	e006      	b.n	8001b78 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b6a:	4b2b      	ldr	r3, [pc, #172]	; (8001c18 <HAL_GPIO_Init+0x2f0>)
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	4929      	ldr	r1, [pc, #164]	; (8001c18 <HAL_GPIO_Init+0x2f0>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d006      	beq.n	8001b92 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b84:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <HAL_GPIO_Init+0x2f0>)
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	4923      	ldr	r1, [pc, #140]	; (8001c18 <HAL_GPIO_Init+0x2f0>)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]
 8001b90:	e006      	b.n	8001ba0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b92:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <HAL_GPIO_Init+0x2f0>)
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	491f      	ldr	r1, [pc, #124]	; (8001c18 <HAL_GPIO_Init+0x2f0>)
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d006      	beq.n	8001bba <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bac:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <HAL_GPIO_Init+0x2f0>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4919      	ldr	r1, [pc, #100]	; (8001c18 <HAL_GPIO_Init+0x2f0>)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	600b      	str	r3, [r1, #0]
 8001bb8:	e006      	b.n	8001bc8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bba:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_GPIO_Init+0x2f0>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	4915      	ldr	r1, [pc, #84]	; (8001c18 <HAL_GPIO_Init+0x2f0>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	3301      	adds	r3, #1
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f47f aeaf 	bne.w	800193c <HAL_GPIO_Init+0x14>
  }
}
 8001bde:	bf00      	nop
 8001be0:	bf00      	nop
 8001be2:	372c      	adds	r7, #44	; 0x2c
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	10320000 	.word	0x10320000
 8001bf0:	10310000 	.word	0x10310000
 8001bf4:	10220000 	.word	0x10220000
 8001bf8:	10210000 	.word	0x10210000
 8001bfc:	10120000 	.word	0x10120000
 8001c00:	10110000 	.word	0x10110000
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40010000 	.word	0x40010000
 8001c0c:	40010800 	.word	0x40010800
 8001c10:	40010c00 	.word	0x40010c00
 8001c14:	40011000 	.word	0x40011000
 8001c18:	40010400 	.word	0x40010400

08001c1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	887b      	ldrh	r3, [r7, #2]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d002      	beq.n	8001c3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	e001      	b.n	8001c3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr

08001c4a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	460b      	mov	r3, r1
 8001c54:	807b      	strh	r3, [r7, #2]
 8001c56:	4613      	mov	r3, r2
 8001c58:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c5a:	787b      	ldrb	r3, [r7, #1]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c60:	887a      	ldrh	r2, [r7, #2]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c66:	e003      	b.n	8001c70 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c68:	887b      	ldrh	r3, [r7, #2]
 8001c6a:	041a      	lsls	r2, r3, #16
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	611a      	str	r2, [r3, #16]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
	...

08001c7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e26c      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 8087 	beq.w	8001daa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c9c:	4b92      	ldr	r3, [pc, #584]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d00c      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ca8:	4b8f      	ldr	r3, [pc, #572]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 030c 	and.w	r3, r3, #12
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d112      	bne.n	8001cda <HAL_RCC_OscConfig+0x5e>
 8001cb4:	4b8c      	ldr	r3, [pc, #560]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc0:	d10b      	bne.n	8001cda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc2:	4b89      	ldr	r3, [pc, #548]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d06c      	beq.n	8001da8 <HAL_RCC_OscConfig+0x12c>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d168      	bne.n	8001da8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e246      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x76>
 8001ce4:	4b80      	ldr	r3, [pc, #512]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a7f      	ldr	r2, [pc, #508]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	e02e      	b.n	8001d50 <HAL_RCC_OscConfig+0xd4>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x98>
 8001cfa:	4b7b      	ldr	r3, [pc, #492]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a7a      	ldr	r2, [pc, #488]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	4b78      	ldr	r3, [pc, #480]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a77      	ldr	r2, [pc, #476]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	e01d      	b.n	8001d50 <HAL_RCC_OscConfig+0xd4>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d1c:	d10c      	bne.n	8001d38 <HAL_RCC_OscConfig+0xbc>
 8001d1e:	4b72      	ldr	r3, [pc, #456]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a71      	ldr	r2, [pc, #452]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	4b6f      	ldr	r3, [pc, #444]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a6e      	ldr	r2, [pc, #440]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	e00b      	b.n	8001d50 <HAL_RCC_OscConfig+0xd4>
 8001d38:	4b6b      	ldr	r3, [pc, #428]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a6a      	ldr	r2, [pc, #424]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	4b68      	ldr	r3, [pc, #416]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a67      	ldr	r2, [pc, #412]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d013      	beq.n	8001d80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d58:	f7ff fcce 	bl	80016f8 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d60:	f7ff fcca 	bl	80016f8 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b64      	cmp	r3, #100	; 0x64
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e1fa      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d72:	4b5d      	ldr	r3, [pc, #372]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0xe4>
 8001d7e:	e014      	b.n	8001daa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7ff fcba 	bl	80016f8 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d88:	f7ff fcb6 	bl	80016f8 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b64      	cmp	r3, #100	; 0x64
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e1e6      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9a:	4b53      	ldr	r3, [pc, #332]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x10c>
 8001da6:	e000      	b.n	8001daa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d063      	beq.n	8001e7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001db6:	4b4c      	ldr	r3, [pc, #304]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 030c 	and.w	r3, r3, #12
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00b      	beq.n	8001dda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dc2:	4b49      	ldr	r3, [pc, #292]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
 8001dca:	2b08      	cmp	r3, #8
 8001dcc:	d11c      	bne.n	8001e08 <HAL_RCC_OscConfig+0x18c>
 8001dce:	4b46      	ldr	r3, [pc, #280]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d116      	bne.n	8001e08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dda:	4b43      	ldr	r3, [pc, #268]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d005      	beq.n	8001df2 <HAL_RCC_OscConfig+0x176>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d001      	beq.n	8001df2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e1ba      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df2:	4b3d      	ldr	r3, [pc, #244]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	4939      	ldr	r1, [pc, #228]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e06:	e03a      	b.n	8001e7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d020      	beq.n	8001e52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e10:	4b36      	ldr	r3, [pc, #216]	; (8001eec <HAL_RCC_OscConfig+0x270>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e16:	f7ff fc6f 	bl	80016f8 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1e:	f7ff fc6b 	bl	80016f8 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e19b      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e30:	4b2d      	ldr	r3, [pc, #180]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4927      	ldr	r1, [pc, #156]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	600b      	str	r3, [r1, #0]
 8001e50:	e015      	b.n	8001e7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e52:	4b26      	ldr	r3, [pc, #152]	; (8001eec <HAL_RCC_OscConfig+0x270>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7ff fc4e 	bl	80016f8 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e60:	f7ff fc4a 	bl	80016f8 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e17a      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e72:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d03a      	beq.n	8001f00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d019      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <HAL_RCC_OscConfig+0x274>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e98:	f7ff fc2e 	bl	80016f8 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea0:	f7ff fc2a 	bl	80016f8 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e15a      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f000 fa9a 	bl	80023f8 <RCC_Delay>
 8001ec4:	e01c      	b.n	8001f00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <HAL_RCC_OscConfig+0x274>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ecc:	f7ff fc14 	bl	80016f8 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed2:	e00f      	b.n	8001ef4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed4:	f7ff fc10 	bl	80016f8 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d908      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e140      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	42420000 	.word	0x42420000
 8001ef0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef4:	4b9e      	ldr	r3, [pc, #632]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1e9      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 80a6 	beq.w	800205a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f12:	4b97      	ldr	r3, [pc, #604]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10d      	bne.n	8001f3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	4b94      	ldr	r3, [pc, #592]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	4a93      	ldr	r2, [pc, #588]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f28:	61d3      	str	r3, [r2, #28]
 8001f2a:	4b91      	ldr	r3, [pc, #580]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f36:	2301      	movs	r3, #1
 8001f38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3a:	4b8e      	ldr	r3, [pc, #568]	; (8002174 <HAL_RCC_OscConfig+0x4f8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d118      	bne.n	8001f78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f46:	4b8b      	ldr	r3, [pc, #556]	; (8002174 <HAL_RCC_OscConfig+0x4f8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a8a      	ldr	r2, [pc, #552]	; (8002174 <HAL_RCC_OscConfig+0x4f8>)
 8001f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f52:	f7ff fbd1 	bl	80016f8 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5a:	f7ff fbcd 	bl	80016f8 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b64      	cmp	r3, #100	; 0x64
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e0fd      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6c:	4b81      	ldr	r3, [pc, #516]	; (8002174 <HAL_RCC_OscConfig+0x4f8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d106      	bne.n	8001f8e <HAL_RCC_OscConfig+0x312>
 8001f80:	4b7b      	ldr	r3, [pc, #492]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4a7a      	ldr	r2, [pc, #488]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6213      	str	r3, [r2, #32]
 8001f8c:	e02d      	b.n	8001fea <HAL_RCC_OscConfig+0x36e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x334>
 8001f96:	4b76      	ldr	r3, [pc, #472]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	4a75      	ldr	r2, [pc, #468]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	6213      	str	r3, [r2, #32]
 8001fa2:	4b73      	ldr	r3, [pc, #460]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	4a72      	ldr	r2, [pc, #456]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	f023 0304 	bic.w	r3, r3, #4
 8001fac:	6213      	str	r3, [r2, #32]
 8001fae:	e01c      	b.n	8001fea <HAL_RCC_OscConfig+0x36e>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	2b05      	cmp	r3, #5
 8001fb6:	d10c      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x356>
 8001fb8:	4b6d      	ldr	r3, [pc, #436]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	4a6c      	ldr	r2, [pc, #432]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001fbe:	f043 0304 	orr.w	r3, r3, #4
 8001fc2:	6213      	str	r3, [r2, #32]
 8001fc4:	4b6a      	ldr	r3, [pc, #424]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	4a69      	ldr	r2, [pc, #420]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	6213      	str	r3, [r2, #32]
 8001fd0:	e00b      	b.n	8001fea <HAL_RCC_OscConfig+0x36e>
 8001fd2:	4b67      	ldr	r3, [pc, #412]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	4a66      	ldr	r2, [pc, #408]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001fd8:	f023 0301 	bic.w	r3, r3, #1
 8001fdc:	6213      	str	r3, [r2, #32]
 8001fde:	4b64      	ldr	r3, [pc, #400]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	4a63      	ldr	r2, [pc, #396]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001fe4:	f023 0304 	bic.w	r3, r3, #4
 8001fe8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d015      	beq.n	800201e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff2:	f7ff fb81 	bl	80016f8 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff8:	e00a      	b.n	8002010 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffa:	f7ff fb7d 	bl	80016f8 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	f241 3288 	movw	r2, #5000	; 0x1388
 8002008:	4293      	cmp	r3, r2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e0ab      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002010:	4b57      	ldr	r3, [pc, #348]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0ee      	beq.n	8001ffa <HAL_RCC_OscConfig+0x37e>
 800201c:	e014      	b.n	8002048 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201e:	f7ff fb6b 	bl	80016f8 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002024:	e00a      	b.n	800203c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f7ff fb67 	bl	80016f8 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	f241 3288 	movw	r2, #5000	; 0x1388
 8002034:	4293      	cmp	r3, r2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e095      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800203c:	4b4c      	ldr	r3, [pc, #304]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1ee      	bne.n	8002026 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002048:	7dfb      	ldrb	r3, [r7, #23]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d105      	bne.n	800205a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800204e:	4b48      	ldr	r3, [pc, #288]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	4a47      	ldr	r2, [pc, #284]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8002054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002058:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 8081 	beq.w	8002166 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002064:	4b42      	ldr	r3, [pc, #264]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 030c 	and.w	r3, r3, #12
 800206c:	2b08      	cmp	r3, #8
 800206e:	d061      	beq.n	8002134 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	2b02      	cmp	r3, #2
 8002076:	d146      	bne.n	8002106 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002078:	4b3f      	ldr	r3, [pc, #252]	; (8002178 <HAL_RCC_OscConfig+0x4fc>)
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207e:	f7ff fb3b 	bl	80016f8 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002086:	f7ff fb37 	bl	80016f8 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e067      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002098:	4b35      	ldr	r3, [pc, #212]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1f0      	bne.n	8002086 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ac:	d108      	bne.n	80020c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020ae:	4b30      	ldr	r3, [pc, #192]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	492d      	ldr	r1, [pc, #180]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020c0:	4b2b      	ldr	r3, [pc, #172]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a19      	ldr	r1, [r3, #32]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	430b      	orrs	r3, r1
 80020d2:	4927      	ldr	r1, [pc, #156]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d8:	4b27      	ldr	r3, [pc, #156]	; (8002178 <HAL_RCC_OscConfig+0x4fc>)
 80020da:	2201      	movs	r2, #1
 80020dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020de:	f7ff fb0b 	bl	80016f8 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e6:	f7ff fb07 	bl	80016f8 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e037      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f8:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0f0      	beq.n	80020e6 <HAL_RCC_OscConfig+0x46a>
 8002104:	e02f      	b.n	8002166 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002106:	4b1c      	ldr	r3, [pc, #112]	; (8002178 <HAL_RCC_OscConfig+0x4fc>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7ff faf4 	bl	80016f8 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002114:	f7ff faf0 	bl	80016f8 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e020      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002126:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x498>
 8002132:	e018      	b.n	8002166 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e013      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	429a      	cmp	r2, r3
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215e:	429a      	cmp	r2, r3
 8002160:	d001      	beq.n	8002166 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40021000 	.word	0x40021000
 8002174:	40007000 	.word	0x40007000
 8002178:	42420060 	.word	0x42420060

0800217c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0d0      	b.n	8002332 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002190:	4b6a      	ldr	r3, [pc, #424]	; (800233c <HAL_RCC_ClockConfig+0x1c0>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d910      	bls.n	80021c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219e:	4b67      	ldr	r3, [pc, #412]	; (800233c <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 0207 	bic.w	r2, r3, #7
 80021a6:	4965      	ldr	r1, [pc, #404]	; (800233c <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ae:	4b63      	ldr	r3, [pc, #396]	; (800233c <HAL_RCC_ClockConfig+0x1c0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0b8      	b.n	8002332 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d020      	beq.n	800220e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021d8:	4b59      	ldr	r3, [pc, #356]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	4a58      	ldr	r2, [pc, #352]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80021de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021f0:	4b53      	ldr	r3, [pc, #332]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	4a52      	ldr	r2, [pc, #328]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021fc:	4b50      	ldr	r3, [pc, #320]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	494d      	ldr	r1, [pc, #308]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	4313      	orrs	r3, r2
 800220c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d040      	beq.n	800229c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d107      	bne.n	8002232 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	4b47      	ldr	r3, [pc, #284]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d115      	bne.n	800225a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e07f      	b.n	8002332 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d107      	bne.n	800224a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223a:	4b41      	ldr	r3, [pc, #260]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d109      	bne.n	800225a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e073      	b.n	8002332 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224a:	4b3d      	ldr	r3, [pc, #244]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e06b      	b.n	8002332 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800225a:	4b39      	ldr	r3, [pc, #228]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f023 0203 	bic.w	r2, r3, #3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4936      	ldr	r1, [pc, #216]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800226c:	f7ff fa44 	bl	80016f8 <HAL_GetTick>
 8002270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002272:	e00a      	b.n	800228a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002274:	f7ff fa40 	bl	80016f8 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e053      	b.n	8002332 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228a:	4b2d      	ldr	r3, [pc, #180]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 020c 	and.w	r2, r3, #12
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	429a      	cmp	r2, r3
 800229a:	d1eb      	bne.n	8002274 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800229c:	4b27      	ldr	r3, [pc, #156]	; (800233c <HAL_RCC_ClockConfig+0x1c0>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d210      	bcs.n	80022cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022aa:	4b24      	ldr	r3, [pc, #144]	; (800233c <HAL_RCC_ClockConfig+0x1c0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f023 0207 	bic.w	r2, r3, #7
 80022b2:	4922      	ldr	r1, [pc, #136]	; (800233c <HAL_RCC_ClockConfig+0x1c0>)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ba:	4b20      	ldr	r3, [pc, #128]	; (800233c <HAL_RCC_ClockConfig+0x1c0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d001      	beq.n	80022cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e032      	b.n	8002332 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d008      	beq.n	80022ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022d8:	4b19      	ldr	r3, [pc, #100]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4916      	ldr	r1, [pc, #88]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d009      	beq.n	800230a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022f6:	4b12      	ldr	r3, [pc, #72]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	490e      	ldr	r1, [pc, #56]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	4313      	orrs	r3, r2
 8002308:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800230a:	f000 f821 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 800230e:	4602      	mov	r2, r0
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	490a      	ldr	r1, [pc, #40]	; (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 800231c:	5ccb      	ldrb	r3, [r1, r3]
 800231e:	fa22 f303 	lsr.w	r3, r2, r3
 8002322:	4a09      	ldr	r2, [pc, #36]	; (8002348 <HAL_RCC_ClockConfig+0x1cc>)
 8002324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <HAL_RCC_ClockConfig+0x1d0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff f9a2 	bl	8001674 <HAL_InitTick>

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40022000 	.word	0x40022000
 8002340:	40021000 	.word	0x40021000
 8002344:	08002c74 	.word	0x08002c74
 8002348:	20000050 	.word	0x20000050
 800234c:	20000054 	.word	0x20000054

08002350 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002350:	b480      	push	{r7}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	2300      	movs	r3, #0
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	2300      	movs	r3, #0
 8002364:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800236a:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b04      	cmp	r3, #4
 8002378:	d002      	beq.n	8002380 <HAL_RCC_GetSysClockFreq+0x30>
 800237a:	2b08      	cmp	r3, #8
 800237c:	d003      	beq.n	8002386 <HAL_RCC_GetSysClockFreq+0x36>
 800237e:	e027      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002380:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002382:	613b      	str	r3, [r7, #16]
      break;
 8002384:	e027      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	0c9b      	lsrs	r3, r3, #18
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	4a17      	ldr	r2, [pc, #92]	; (80023ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002390:	5cd3      	ldrb	r3, [r2, r3]
 8002392:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d010      	beq.n	80023c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800239e:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	0c5b      	lsrs	r3, r3, #17
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	4a11      	ldr	r2, [pc, #68]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023aa:	5cd3      	ldrb	r3, [r2, r3]
 80023ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a0d      	ldr	r2, [pc, #52]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80023b2:	fb02 f203 	mul.w	r2, r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	e004      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a0c      	ldr	r2, [pc, #48]	; (80023f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023c4:	fb02 f303 	mul.w	r3, r2, r3
 80023c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	613b      	str	r3, [r7, #16]
      break;
 80023ce:	e002      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80023d2:	613b      	str	r3, [r7, #16]
      break;
 80023d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023d6:	693b      	ldr	r3, [r7, #16]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	371c      	adds	r7, #28
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000
 80023e8:	007a1200 	.word	0x007a1200
 80023ec:	08002c84 	.word	0x08002c84
 80023f0:	08002c94 	.word	0x08002c94
 80023f4:	003d0900 	.word	0x003d0900

080023f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002400:	4b0a      	ldr	r3, [pc, #40]	; (800242c <RCC_Delay+0x34>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a0a      	ldr	r2, [pc, #40]	; (8002430 <RCC_Delay+0x38>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	0a5b      	lsrs	r3, r3, #9
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	fb02 f303 	mul.w	r3, r2, r3
 8002412:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002414:	bf00      	nop
  }
  while (Delay --);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1e5a      	subs	r2, r3, #1
 800241a:	60fa      	str	r2, [r7, #12]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f9      	bne.n	8002414 <RCC_Delay+0x1c>
}
 8002420:	bf00      	nop
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr
 800242c:	20000050 	.word	0x20000050
 8002430:	10624dd3 	.word	0x10624dd3

08002434 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e041      	b.n	80024ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d106      	bne.n	8002460 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff f872 	bl	8001544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3304      	adds	r3, #4
 8002470:	4619      	mov	r1, r3
 8002472:	4610      	mov	r0, r2
 8002474:	f000 fa6e 	bl	8002954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d001      	beq.n	80024ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e035      	b.n	8002558 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a16      	ldr	r2, [pc, #88]	; (8002564 <HAL_TIM_Base_Start_IT+0x90>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d009      	beq.n	8002522 <HAL_TIM_Base_Start_IT+0x4e>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002516:	d004      	beq.n	8002522 <HAL_TIM_Base_Start_IT+0x4e>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a12      	ldr	r2, [pc, #72]	; (8002568 <HAL_TIM_Base_Start_IT+0x94>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d111      	bne.n	8002546 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2b06      	cmp	r3, #6
 8002532:	d010      	beq.n	8002556 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0201 	orr.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002544:	e007      	b.n	8002556 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0201 	orr.w	r2, r2, #1
 8002554:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40012c00 	.word	0x40012c00
 8002568:	40000400 	.word	0x40000400

0800256c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b02      	cmp	r3, #2
 8002580:	d122      	bne.n	80025c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b02      	cmp	r3, #2
 800258e:	d11b      	bne.n	80025c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0202 	mvn.w	r2, #2
 8002598:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f9b4 	bl	800291c <HAL_TIM_IC_CaptureCallback>
 80025b4:	e005      	b.n	80025c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f9a7 	bl	800290a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f9b6 	bl	800292e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d122      	bne.n	800261c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d11b      	bne.n	800261c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0204 	mvn.w	r2, #4
 80025ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2202      	movs	r2, #2
 80025f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f98a 	bl	800291c <HAL_TIM_IC_CaptureCallback>
 8002608:	e005      	b.n	8002616 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f97d 	bl	800290a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f98c 	bl	800292e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b08      	cmp	r3, #8
 8002628:	d122      	bne.n	8002670 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b08      	cmp	r3, #8
 8002636:	d11b      	bne.n	8002670 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f06f 0208 	mvn.w	r2, #8
 8002640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2204      	movs	r2, #4
 8002646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f960 	bl	800291c <HAL_TIM_IC_CaptureCallback>
 800265c:	e005      	b.n	800266a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f953 	bl	800290a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f962 	bl	800292e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	2b10      	cmp	r3, #16
 800267c:	d122      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	2b10      	cmp	r3, #16
 800268a:	d11b      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f06f 0210 	mvn.w	r2, #16
 8002694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2208      	movs	r2, #8
 800269a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f936 	bl	800291c <HAL_TIM_IC_CaptureCallback>
 80026b0:	e005      	b.n	80026be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f929 	bl	800290a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f938 	bl	800292e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d10e      	bne.n	80026f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d107      	bne.n	80026f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f06f 0201 	mvn.w	r2, #1
 80026e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7fe fdd8 	bl	80012a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fa:	2b80      	cmp	r3, #128	; 0x80
 80026fc:	d10e      	bne.n	800271c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002708:	2b80      	cmp	r3, #128	; 0x80
 800270a:	d107      	bne.n	800271c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 fa6b 	bl	8002bf2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002726:	2b40      	cmp	r3, #64	; 0x40
 8002728:	d10e      	bne.n	8002748 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002734:	2b40      	cmp	r3, #64	; 0x40
 8002736:	d107      	bne.n	8002748 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f8fc 	bl	8002940 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f003 0320 	and.w	r3, r3, #32
 8002752:	2b20      	cmp	r3, #32
 8002754:	d10e      	bne.n	8002774 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b20      	cmp	r3, #32
 8002762:	d107      	bne.n	8002774 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f06f 0220 	mvn.w	r2, #32
 800276c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 fa36 	bl	8002be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_TIM_ConfigClockSource+0x1c>
 8002794:	2302      	movs	r3, #2
 8002796:	e0b4      	b.n	8002902 <HAL_TIM_ConfigClockSource+0x186>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d0:	d03e      	beq.n	8002850 <HAL_TIM_ConfigClockSource+0xd4>
 80027d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d6:	f200 8087 	bhi.w	80028e8 <HAL_TIM_ConfigClockSource+0x16c>
 80027da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027de:	f000 8086 	beq.w	80028ee <HAL_TIM_ConfigClockSource+0x172>
 80027e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e6:	d87f      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x16c>
 80027e8:	2b70      	cmp	r3, #112	; 0x70
 80027ea:	d01a      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0xa6>
 80027ec:	2b70      	cmp	r3, #112	; 0x70
 80027ee:	d87b      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x16c>
 80027f0:	2b60      	cmp	r3, #96	; 0x60
 80027f2:	d050      	beq.n	8002896 <HAL_TIM_ConfigClockSource+0x11a>
 80027f4:	2b60      	cmp	r3, #96	; 0x60
 80027f6:	d877      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x16c>
 80027f8:	2b50      	cmp	r3, #80	; 0x50
 80027fa:	d03c      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0xfa>
 80027fc:	2b50      	cmp	r3, #80	; 0x50
 80027fe:	d873      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002800:	2b40      	cmp	r3, #64	; 0x40
 8002802:	d058      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0x13a>
 8002804:	2b40      	cmp	r3, #64	; 0x40
 8002806:	d86f      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002808:	2b30      	cmp	r3, #48	; 0x30
 800280a:	d064      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x15a>
 800280c:	2b30      	cmp	r3, #48	; 0x30
 800280e:	d86b      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002810:	2b20      	cmp	r3, #32
 8002812:	d060      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002814:	2b20      	cmp	r3, #32
 8002816:	d867      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002818:	2b00      	cmp	r3, #0
 800281a:	d05c      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x15a>
 800281c:	2b10      	cmp	r3, #16
 800281e:	d05a      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002820:	e062      	b.n	80028e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6899      	ldr	r1, [r3, #8]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f000 f95e 	bl	8002af2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002844:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	609a      	str	r2, [r3, #8]
      break;
 800284e:	e04f      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	6899      	ldr	r1, [r3, #8]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f000 f947 	bl	8002af2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002872:	609a      	str	r2, [r3, #8]
      break;
 8002874:	e03c      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6859      	ldr	r1, [r3, #4]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	461a      	mov	r2, r3
 8002884:	f000 f8be 	bl	8002a04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2150      	movs	r1, #80	; 0x50
 800288e:	4618      	mov	r0, r3
 8002890:	f000 f915 	bl	8002abe <TIM_ITRx_SetConfig>
      break;
 8002894:	e02c      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6859      	ldr	r1, [r3, #4]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	461a      	mov	r2, r3
 80028a4:	f000 f8dc 	bl	8002a60 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2160      	movs	r1, #96	; 0x60
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 f905 	bl	8002abe <TIM_ITRx_SetConfig>
      break;
 80028b4:	e01c      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6859      	ldr	r1, [r3, #4]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	461a      	mov	r2, r3
 80028c4:	f000 f89e 	bl	8002a04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2140      	movs	r1, #64	; 0x40
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 f8f5 	bl	8002abe <TIM_ITRx_SetConfig>
      break;
 80028d4:	e00c      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4619      	mov	r1, r3
 80028e0:	4610      	mov	r0, r2
 80028e2:	f000 f8ec 	bl	8002abe <TIM_ITRx_SetConfig>
      break;
 80028e6:	e003      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	73fb      	strb	r3, [r7, #15]
      break;
 80028ec:	e000      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002900:	7bfb      	ldrb	r3, [r7, #15]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr

0800292e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr
	...

08002954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a25      	ldr	r2, [pc, #148]	; (80029fc <TIM_Base_SetConfig+0xa8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d007      	beq.n	800297c <TIM_Base_SetConfig+0x28>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002972:	d003      	beq.n	800297c <TIM_Base_SetConfig+0x28>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a22      	ldr	r2, [pc, #136]	; (8002a00 <TIM_Base_SetConfig+0xac>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d108      	bne.n	800298e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a1a      	ldr	r2, [pc, #104]	; (80029fc <TIM_Base_SetConfig+0xa8>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d007      	beq.n	80029a6 <TIM_Base_SetConfig+0x52>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299c:	d003      	beq.n	80029a6 <TIM_Base_SetConfig+0x52>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a17      	ldr	r2, [pc, #92]	; (8002a00 <TIM_Base_SetConfig+0xac>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d108      	bne.n	80029b8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a07      	ldr	r2, [pc, #28]	; (80029fc <TIM_Base_SetConfig+0xa8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d103      	bne.n	80029ec <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	615a      	str	r2, [r3, #20]
}
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	40012c00 	.word	0x40012c00
 8002a00:	40000400 	.word	0x40000400

08002a04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	f023 0201 	bic.w	r2, r3, #1
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f023 030a 	bic.w	r3, r3, #10
 8002a40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	621a      	str	r2, [r3, #32]
}
 8002a56:	bf00      	nop
 8002a58:	371c      	adds	r7, #28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	f023 0210 	bic.w	r2, r3, #16
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	031b      	lsls	r3, r3, #12
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a9c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	621a      	str	r2, [r3, #32]
}
 8002ab4:	bf00      	nop
 8002ab6:	371c      	adds	r7, #28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr

08002abe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b085      	sub	sp, #20
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f043 0307 	orr.w	r3, r3, #7
 8002ae0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	609a      	str	r2, [r3, #8]
}
 8002ae8:	bf00      	nop
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr

08002af2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b087      	sub	sp, #28
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
 8002afe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	021a      	lsls	r2, r3, #8
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	431a      	orrs	r2, r3
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	609a      	str	r2, [r3, #8]
}
 8002b26:	bf00      	nop
 8002b28:	371c      	adds	r7, #28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e041      	b.n	8002bcc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a14      	ldr	r2, [pc, #80]	; (8002bd8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d009      	beq.n	8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b94:	d004      	beq.n	8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a10      	ldr	r2, [pc, #64]	; (8002bdc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d10c      	bne.n	8002bba <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ba6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40012c00 	.word	0x40012c00
 8002bdc:	40000400 	.word	0x40000400

08002be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr

08002bf2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr

08002c04 <__libc_init_array>:
 8002c04:	b570      	push	{r4, r5, r6, lr}
 8002c06:	2600      	movs	r6, #0
 8002c08:	4d0c      	ldr	r5, [pc, #48]	; (8002c3c <__libc_init_array+0x38>)
 8002c0a:	4c0d      	ldr	r4, [pc, #52]	; (8002c40 <__libc_init_array+0x3c>)
 8002c0c:	1b64      	subs	r4, r4, r5
 8002c0e:	10a4      	asrs	r4, r4, #2
 8002c10:	42a6      	cmp	r6, r4
 8002c12:	d109      	bne.n	8002c28 <__libc_init_array+0x24>
 8002c14:	f000 f822 	bl	8002c5c <_init>
 8002c18:	2600      	movs	r6, #0
 8002c1a:	4d0a      	ldr	r5, [pc, #40]	; (8002c44 <__libc_init_array+0x40>)
 8002c1c:	4c0a      	ldr	r4, [pc, #40]	; (8002c48 <__libc_init_array+0x44>)
 8002c1e:	1b64      	subs	r4, r4, r5
 8002c20:	10a4      	asrs	r4, r4, #2
 8002c22:	42a6      	cmp	r6, r4
 8002c24:	d105      	bne.n	8002c32 <__libc_init_array+0x2e>
 8002c26:	bd70      	pop	{r4, r5, r6, pc}
 8002c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c2c:	4798      	blx	r3
 8002c2e:	3601      	adds	r6, #1
 8002c30:	e7ee      	b.n	8002c10 <__libc_init_array+0xc>
 8002c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c36:	4798      	blx	r3
 8002c38:	3601      	adds	r6, #1
 8002c3a:	e7f2      	b.n	8002c22 <__libc_init_array+0x1e>
 8002c3c:	08002c98 	.word	0x08002c98
 8002c40:	08002c98 	.word	0x08002c98
 8002c44:	08002c98 	.word	0x08002c98
 8002c48:	08002c9c 	.word	0x08002c9c

08002c4c <memset>:
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	4402      	add	r2, r0
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d100      	bne.n	8002c56 <memset+0xa>
 8002c54:	4770      	bx	lr
 8002c56:	f803 1b01 	strb.w	r1, [r3], #1
 8002c5a:	e7f9      	b.n	8002c50 <memset+0x4>

08002c5c <_init>:
 8002c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5e:	bf00      	nop
 8002c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c62:	bc08      	pop	{r3}
 8002c64:	469e      	mov	lr, r3
 8002c66:	4770      	bx	lr

08002c68 <_fini>:
 8002c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c6a:	bf00      	nop
 8002c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c6e:	bc08      	pop	{r3}
 8002c70:	469e      	mov	lr, r3
 8002c72:	4770      	bx	lr
